generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(150)
  description  String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  author       User       @relation("UserRecipeCategories", fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  recipes      Recipe[]

  @@unique([name, userId, restaurantId])
  @@index([userId])
  @@index([restaurantId])
  @@map("categories")
}

model IngredientCategory {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(150)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  userId      Int          @map("user_id")
  author      User         @relation("UserIngredientCategories", fields: [userId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]

  @@unique([name, userId])
  @@index([userId])
  @@map("ingredient_categories")
}

model UnitOfMeasure {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(100)
  abbreviation      String?        @db.VarChar(20)
  type              UnitType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  userId            Int            @map("user_id")
  recipeIngredients UnitQuantity[] @relation("RecipeIngredientUnit")
  recipesYield      Recipe[]       @relation("RecipeYieldUnit")
  author            User           @relation("UserUnits", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@unique([abbreviation, userId])
  @@index([userId])
  @@map("units_of_measure")
}

model Ingredient {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(255)
  description          String?
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  ingredientCategoryId Int?                @map("ingredient_category_id")
  userId               Int                 @map("user_id")
  ingredientCategory   IngredientCategory? @relation(fields: [ingredientCategoryId], references: [id])
  author               User                @relation("UserIngredients", fields: [userId], references: [id], onDelete: Cascade)
  recipeIngredients    UnitQuantity[]      @relation("RecipeIngredientBase")

  @@unique([name, userId])
  @@index([ingredientCategoryId])
  @@index([userId])
  @@map("ingredients")
}

model Recipe {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  description       String?
  instructions      String
  yieldQuantity     Decimal?       @map("yield_quantity") @db.Decimal(10, 2)
  yieldUnitId       Int?           @map("yield_unit_id")
  prepTimeMinutes   Int?           @map("prep_time_minutes")
  cookTimeMinutes   Int?           @map("cook_time_minutes")
  tags              String[]
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  categoryId        Int?           @map("category_id")
  userId            Int            @map("user_id")
  photoUrl          String?        @map("photo_url")
  photoPublicId     String?        @map("photo_public_id")
  menuTitle         String?        @map("menu_title") @db.VarChar(255)
  menuDescription   String?        @map("menu_description")
  menuItems         MenuItem[]     @relation("RecipeMenuItems")
  prepTasks         PrepTask[]     @relation("RecipePrepTasks")
  recipeIngredients UnitQuantity[] @relation("RecipeParent")
  usedAsSubRecipe   UnitQuantity[] @relation("RecipeSubComponent")
  category          Category?      @relation(fields: [categoryId], references: [id])
  author            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  yieldUnit         UnitOfMeasure? @relation("RecipeYieldUnit", fields: [yieldUnitId], references: [id])

  @@index([categoryId])
  @@index([userId])
  @@map("recipes")
}

model UnitQuantity {
  id           Int           @id @default(autoincrement())
  recipeId     Int           @map("recipe_id")
  ingredientId Int?          @map("ingredient_id")
  subRecipeId  Int?          @map("sub_recipe_id")
  quantity     Decimal       @db.Decimal(10, 2)
  unitId       Int           @map("unit_id")
  order        Int           @default(0)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  ingredient   Ingredient?   @relation("RecipeIngredientBase", fields: [ingredientId], references: [id], onDelete: Restrict)
  recipe       Recipe        @relation("RecipeParent", fields: [recipeId], references: [id], onDelete: Cascade)
  subRecipe    Recipe?       @relation("RecipeSubComponent", fields: [subRecipeId], references: [id], onDelete: Restrict)
  unit         UnitOfMeasure @relation("RecipeIngredientUnit", fields: [unitId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
  @@index([subRecipeId])
  @@index([unitId])
  @@map("recipe_ingredients")
}

model PrepColumn {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255)
  order     Int        @default(0)
  color     String     @default("#1976d2") @db.VarChar(7)
  userId    Int        @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation("UserPrepColumns", fields: [userId], references: [id], onDelete: Cascade)
  tasks     PrepTask[]

  @@unique([name, userId])
  @@index([userId])
  @@index([order])
  @@map("prep_columns")
}

model User {
  id                         Int                      @id @default(autoincrement())
  email                      String                   @unique
  name                       String?
  password                   String
  createdAt                  DateTime                 @default(now()) @map("created_at")
  updatedAt                  DateTime                 @updatedAt @map("updated_at")
  role                       UserRole                 @default(USER)
  isCustomer                 Boolean                  @default(false) @map("is_customer")
  phone                      String?                  @db.VarChar(50)
  restaurantStaff            RestaurantStaff[]        @relation("StaffUser")
  customerReservations       Reservation[]            @relation("CustomerReservations")
  recipeCategories           Category[]               @relation("UserRecipeCategories")
  comments                   Comment[]
  ingredientCategories       IngredientCategory[]     @relation("UserIngredientCategories")
  ingredients                Ingredient[]             @relation("UserIngredients")
  assignedIssues             Issue[]                  @relation("AssignedIssues")
  createdIssues              Issue[]                  @relation("CreatedIssues")
  menus                      Menu[]                   @relation("UserMenus")
  prepColumns                PrepColumn[]             @relation("UserPrepColumns")
  prepTasks                  PrepTask[]               @relation("UserPrepTasks")
  recipes                    Recipe[]
  units                      UnitOfMeasure[]          @relation("UserUnits")
  reservations               Reservation[]            @relation("UserReservations")
  orders                     Order[]                  @relation("UserOrders")
  customerProfile            CustomerProfile?
  emailVerificationTokens    EmailVerificationToken[]
  passwordResetTokens        PasswordResetToken[]
  refreshTokens              RefreshToken[]
  reservationLogs            ReservationLog[]
  convertedGuestReservations GuestReservation[]       @relation("convertedToUser")
  ReservationNew             ReservationNew[]
  OrderNew                   OrderNew[]

  @@map("users")
}

model Customer {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  password      String
  phone         String?  @db.VarChar(50)
  emailVerified Boolean  @default(false) @map("email_verified")
  phoneVerified Boolean  @default(false) @map("phone_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Customer-specific relations
  profile                 CustomerProfileNew?
  reservations            ReservationNew[]                 @relation("CustomerReservationsNew")
  orders                  OrderNew[]                       @relation("CustomerOrdersNew")
  emailVerificationTokens CustomerEmailVerificationToken[]
  passwordResetTokens     CustomerPasswordResetToken[]
  refreshTokens           CustomerRefreshToken[]

  @@map("customers")
}

model CustomerProfileNew {
  id                     Int       @id @default(autoincrement())
  customerId             Int       @unique @map("customer_id")
  preferredContactMethod String?   @default("email") @map("preferred_contact_method") @db.VarChar(20)
  dietaryRestrictions    String?   @map("dietary_restrictions")
  specialRequests        String?   @map("special_requests")
  vipStatus              Boolean   @default(false) @map("vip_status")
  tags                   String[]
  notes                  String?
  marketingOptIn         Boolean   @default(true) @map("marketing_opt_in")
  birthday               DateTime? @db.Date
  anniversary            DateTime? @db.Date
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  customer               Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([vipStatus])
  @@map("customer_profiles_new")
}

model CustomerEmailVerificationToken {
  id         Int       @id @default(autoincrement())
  customerId Int       @map("customer_id")
  token      String    @unique @db.VarChar(255)
  expiresAt  DateTime  @map("expires_at")
  usedAt     DateTime? @map("used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([customerId])
  @@map("customer_email_verification_tokens")
}

model CustomerPasswordResetToken {
  id         Int       @id @default(autoincrement())
  customerId Int       @map("customer_id")
  token      String    @unique @db.VarChar(255)
  expiresAt  DateTime  @map("expires_at")
  usedAt     DateTime? @map("used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([customerId])
  @@map("customer_password_reset_tokens")
}

model CustomerRefreshToken {
  id         Int      @id @default(autoincrement())
  customerId Int      @map("customer_id")
  token      String   @unique @db.VarChar(500)
  expiresAt  DateTime @map("expires_at")
  deviceInfo String?  @map("device_info")
  createdAt  DateTime @default(now()) @map("created_at")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([customerId])
  @@map("customer_refresh_tokens")
}

model ReservationNew {
  id                  Int               @id @default(autoincrement())
  customerName        String            @map("customer_name") @db.VarChar(255)
  customerPhone       String?           @map("customer_phone") @db.VarChar(50)
  customerEmail       String?           @map("customer_email") @db.VarChar(255)
  customerId          Int?              @map("customer_id")
  restaurantId        Int               @map("restaurant_id")
  partySize           Int               @map("party_size")
  reservationDate     DateTime          @map("reservation_date")
  reservationTime     String            @map("reservation_time") @db.VarChar(10)
  status              ReservationStatus @default(CONFIRMED)
  notes               String?
  specialRequests     String?           @map("special_requests")
  tableIds            Int[]             @map("table_ids")
  durationMinutes     Int               @default(90) @map("duration_minutes")
  source              String            @default("website") @db.VarChar(20)
  confirmationSent    Boolean           @default(false) @map("confirmation_sent")
  reminderSent        Boolean           @default(false) @map("reminder_sent")
  actualArrivalTime   DateTime?         @map("actual_arrival_time")
  actualDepartureTime DateTime?         @map("actual_departure_time")
  guestNotes          String?           @map("guest_notes")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  createdByUserId     Int?              @map("created_by_user_id")
  createdByUser       User?             @relation(fields: [createdByUserId], references: [id])
  customer            Customer?         @relation("CustomerReservationsNew", fields: [customerId], references: [id])
  restaurant          Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders              OrderNew[]        @relation("ReservationOrdersNew")

  @@index([createdByUserId])
  @@index([customerId])
  @@index([restaurantId])
  @@index([reservationDate])
  @@index([status])
  @@map("reservations_new")
}

model OrderNew {
  id              Int             @id @default(autoincrement())
  orderNumber     String          @unique @map("order_number") @db.VarChar(50)
  reservationId   Int?            @map("reservation_id")
  restaurantId    Int             @map("restaurant_id")
  customerId      Int?            @map("customer_id")
  customerName    String?         @map("customer_name") @db.VarChar(255)
  status          OrderStatus     @default(NEW)
  orderType       OrderType       @default(DINE_IN) @map("order_type")
  notes           String?
  totalAmount     Decimal?        @map("total_amount") @db.Decimal(10, 2)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  createdByUserId Int?            @map("created_by_user_id")
  createdByUser   User?           @relation(fields: [createdByUserId], references: [id])
  customer        Customer?       @relation("CustomerOrdersNew", fields: [customerId], references: [id])
  restaurant      Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  reservation     ReservationNew? @relation("ReservationOrdersNew", fields: [reservationId], references: [id])
  orderItems      OrderItemNew[]  @relation("OrderOrderItemsNew")

  @@index([createdByUserId])
  @@index([customerId])
  @@index([restaurantId])
  @@index([reservationId])
  @@index([status])
  @@index([createdAt])
  @@map("orders_new")
}

model OrderItemNew {
  id         Int             @id @default(autoincrement())
  orderId    Int             @map("order_id")
  menuItemId Int             @map("menu_item_id")
  quantity   Int             @default(1)
  price      Decimal         @db.Decimal(10, 2)
  modifiers  Json?           @db.Json
  status     OrderItemStatus @default(PENDING)
  notes      String?
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  order      OrderNew        @relation("OrderOrderItemsNew", fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem        @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
  @@map("order_items_new")
}

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  token      String   @unique @db.VarChar(500)
  expiresAt  DateTime @map("expires_at")
  deviceInfo String?  @map("device_info")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model Issue {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  description  String
  type         IssueType
  status       IssueStatus   @default(OPEN)
  priority     IssuePriority @default(MEDIUM)
  isPublic     Boolean       @default(false) @map("is_public")
  createdById  Int           @map("created_by_id")
  assignedToId Int?          @map("assigned_to_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  comments     Comment[]
  labels       IssueLabel[]
  assignedTo   User?         @relation("AssignedIssues", fields: [assignedToId], references: [id])
  createdBy    User          @relation("CreatedIssues", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@map("issues")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  isInternal Boolean  @default(false) @map("is_internal")
  issueId    Int      @map("issue_id")
  userId     Int      @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([issueId])
  @@index([userId])
  @@map("comments")
}

model Label {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  color       String       @db.VarChar(7)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  issues      IssueLabel[]

  @@map("labels")
}

model IssueLabel {
  issueId   Int      @map("issue_id")
  labelId   Int      @map("label_id")
  createdAt DateTime @default(now()) @map("created_at")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([issueId, labelId])
  @@index([issueId])
  @@index([labelId])
  @@map("issue_labels")
}

model PrepTask {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(255)
  description String?
  recipeId    Int?       @map("recipe_id")
  userId      Int        @map("user_id")
  order       Int        @default(0)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  columnId    String     @map("column_id")
  column      PrepColumn @relation(fields: [columnId], references: [id])
  recipe      Recipe?    @relation("RecipePrepTasks", fields: [recipeId], references: [id])
  user        User       @relation("UserPrepTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipeId])
  @@index([columnId])
  @@index([order])
  @@map("prep_tasks")
}

model Menu {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  title               String?
  subtitle            String?
  font                String?       @default("Playfair Display")
  layout              String?       @default("single")
  showDollarSign      Boolean       @default(true) @map("show_dollar_sign")
  showDecimals        Boolean       @default(true) @map("show_decimals")
  showSectionDividers Boolean       @default(true) @map("show_section_dividers")
  logoPath            String?       @map("logo_path")
  logoPosition        String?       @default("top") @map("logo_position")
  logoSize            String?       @default("200") @map("logo_size")
  logoOffset          String?       @default("0") @map("logo_offset")
  logoVisible         Boolean       @default(true) @map("logo_visible")
  logoAlignment       String?       @default("center") @map("logo_alignment")
  backgroundColor     String?       @default("#ffffff") @map("background_color")
  textColor           String?       @default("#000000") @map("text_color")
  accentColor         String?       @default("#333333") @map("accent_color")
  titleFontSize       String?       @default("normal") @map("title_font_size")
  subtitleFontSize    String?       @default("normal") @map("subtitle_font_size")
  sectionFontSize     String?       @default("normal") @map("section_font_size")
  itemNameFontSize    String?       @default("normal") @map("item_name_font_size")
  itemDescFontSize    String?       @default("normal") @map("item_desc_font_size")
  sectionDividerStyle String?       @default("solid") @map("section_divider_style")
  sectionDividerWidth String?       @default("1px") @map("section_divider_width")
  sectionDividerColor String?       @default("#333333") @map("section_divider_color")
  richTextEnabled     Boolean       @default(false) @map("rich_text_enabled")
  isArchived          Boolean       @default(false) @map("is_archived")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  userId              Int           @map("user_id")
  sections            MenuSection[]
  author              User          @relation("UserMenus", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("menus")
}

model MenuSection {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  position Int        @default(0)
  active   Boolean    @default(true)
  menuId   Int        @map("menu_id")
  items    MenuItem[]
  menu     Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([position])
  @@map("menu_sections")
}

model MenuItem {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  description   String?
  price         String?
  position      Int            @default(0)
  active        Boolean        @default(true)
  recipeId      Int?           @map("recipe_id")
  sectionId     Int            @map("section_id")
  orderItems    OrderItem[]    @relation("MenuItemOrderItems")
  orderItemsNew OrderItemNew[]
  recipe        Recipe?        @relation("RecipeMenuItems", fields: [recipeId], references: [id])
  section       MenuSection    @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([recipeId])
  @@index([position])
  @@map("menu_items")
}

model Reservation {
  id                  Int               @id @default(autoincrement())
  customerName        String            @map("customer_name") @db.VarChar(255)
  customerPhone       String?           @map("customer_phone") @db.VarChar(50)
  customerEmail       String?           @map("customer_email") @db.VarChar(255)
  customerId          Int?              @map("customer_id")
  restaurantId        Int               @map("restaurant_id")
  partySize           Int               @map("party_size")
  reservationDate     DateTime          @map("reservation_date")
  reservationTime     String            @map("reservation_time") @db.VarChar(10)
  status              ReservationStatus @default(CONFIRMED)
  notes               String?
  specialRequests     String?           @map("special_requests")
  tableIds            Int[]             @map("table_ids")
  durationMinutes     Int               @default(90) @map("duration_minutes")
  source              String            @default("website") @db.VarChar(20)
  confirmationSent    Boolean           @default(false) @map("confirmation_sent")
  reminderSent        Boolean           @default(false) @map("reminder_sent")
  actualArrivalTime   DateTime?         @map("actual_arrival_time")
  actualDepartureTime DateTime?         @map("actual_departure_time")
  guestNotes          String?           @map("guest_notes")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  userId              Int               @map("user_id")
  user                User              @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)
  customer            User?             @relation("CustomerReservations", fields: [customerId], references: [id])
  restaurant          Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders              Order[]           @relation("ReservationOrders")
  reservationLogs     ReservationLog[]
  guestReservation    GuestReservation?

  @@index([userId])
  @@index([customerId])
  @@index([restaurantId])
  @@index([reservationDate])
  @@index([status])
  @@map("reservations")
}

model ReservationLog {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  userId        Int?        @map("user_id")
  action        String      @db.VarChar(50)
  changes       Json?       @db.Json
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  user          User?       @relation(fields: [userId], references: [id])

  @@index([reservationId])
  @@index([userId])
  @@index([action])
  @@map("reservation_logs")
}

model GuestReservation {
  id                Int         @id @default(autoincrement())
  reservationId     Int         @unique @map("reservation_id")
  guestEmail        String      @map("guest_email") @db.VarChar(255)
  guestPhone        String?     @map("guest_phone") @db.VarChar(50)
  conversionToken   String?     @unique @map("conversion_token") @db.VarChar(255)
  convertedToUserId Int?        @map("converted_to_user_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  reservation       Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  convertedToUser   User?       @relation("convertedToUser", fields: [convertedToUserId], references: [id])

  @@index([guestEmail])
  @@index([conversionToken])
  @@map("guest_reservations")
}

model Order {
  id            Int          @id @default(autoincrement())
  orderNumber   String       @unique @map("order_number") @db.VarChar(50)
  reservationId Int?         @map("reservation_id")
  restaurantId  Int          @map("restaurant_id")
  customerName  String?      @map("customer_name") @db.VarChar(255)
  status        OrderStatus  @default(NEW)
  orderType     OrderType    @default(DINE_IN) @map("order_type")
  notes         String?
  totalAmount   Decimal?     @map("total_amount") @db.Decimal(10, 2)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  userId        Int          @map("user_id")
  user          User         @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  reservation   Reservation? @relation("ReservationOrders", fields: [reservationId], references: [id])
  orderItems    OrderItem[]  @relation("OrderOrderItems")

  @@index([userId])
  @@index([restaurantId])
  @@index([reservationId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  orderId    Int             @map("order_id")
  menuItemId Int             @map("menu_item_id")
  quantity   Int             @default(1)
  price      Decimal         @db.Decimal(10, 2)
  modifiers  Json?           @db.Json
  status     OrderItemStatus @default(PENDING)
  notes      String?
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  order      Order           @relation("OrderOrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem        @relation("MenuItemOrderItems", fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
  @@index([status])
  @@map("order_items")
}

model Restaurant {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar(255)
  slug            String              @unique @db.VarChar(255)
  description     String?
  cuisine         String?             @db.VarChar(100)
  address         String?
  city            String?             @db.VarChar(100)
  state           String?             @db.VarChar(50)
  zipCode         String?             @map("zip_code") @db.VarChar(20)
  country         String?             @db.VarChar(100)
  phone           String?             @db.VarChar(50)
  email           String?             @db.VarChar(255)
  website         String?
  logoUrl         String?             @map("logo_url")
  coverImageUrl   String?             @map("cover_image_url")
  openingHours    Json?               @map("opening_hours")
  isActive        Boolean             @default(true) @map("is_active")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  settings        RestaurantSettings?
  staff           RestaurantStaff[]
  reservations    Reservation[]
  orders          Order[]
  categories      Category[]
  contentBlocks   ContentBlock[]
  reservationsNew ReservationNew[]
  ordersNew       OrderNew[]

  @@index([slug])
  @@index([isActive])
  @@map("restaurants")
}

model RestaurantSettings {
  id           Int @id @default(autoincrement())
  restaurantId Int @unique @map("restaurant_id")

  // Website Branding
  websiteName  String? @map("website_name")
  tagline      String?
  logoUrl      String? @map("logo_url")
  logoPublicId String? @map("logo_public_id")

  // Hero Section
  heroTitle         String? @map("hero_title")
  heroSubtitle      String? @map("hero_subtitle")
  heroImageUrl      String? @map("hero_image_url")
  heroImagePublicId String? @map("hero_image_public_id")
  heroCTAText       String? @map("hero_cta_text")
  heroCTALink       String? @map("hero_cta_link")

  // About Section
  aboutTitle         String? @map("about_title")
  aboutDescription   String? @map("about_description") @db.Text
  aboutImageUrl      String? @map("about_image_url")
  aboutImagePublicId String? @map("about_image_public_id")

  // Theme Customization
  primaryColor   String? @default("#1976d2") @map("primary_color")
  secondaryColor String? @default("#dc004e") @map("secondary_color")
  accentColor    String? @default("#333333") @map("accent_color")
  fontPrimary    String? @default("Roboto, sans-serif") @map("font_primary")
  fontSecondary  String? @default("Playfair Display, serif") @map("font_secondary")

  // Contact Info
  contactPhone   String? @map("contact_phone")
  contactEmail   String? @map("contact_email")
  contactAddress String? @map("contact_address")
  contactCity    String? @map("contact_city")
  contactState   String? @map("contact_state")
  contactZip     String? @map("contact_zip")

  // Opening Hours (JSON object with day: hours format)
  openingHours Json? @map("opening_hours")

  // Social Media
  facebookUrl  String? @map("facebook_url")
  instagramUrl String? @map("instagram_url")
  twitterUrl   String? @map("twitter_url")

  // Menu Display Settings
  activeMenuIds   Int[]   @map("active_menu_ids")
  menuDisplayMode String? @default("tabs") @map("menu_display_mode") // tabs, accordion, single

  // Footer
  footerText String? @map("footer_text")

  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")
  metaKeywords    String? @map("meta_keywords")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restaurant_settings")
}

model ContentBlock {
  id            Int      @id @default(autoincrement())
  restaurantId  Int      @map("restaurant_id")
  page          String   @default("home") @db.VarChar(50)
  blockType     String   @map("block_type") @db.VarChar(50)
  title         String?  @db.VarChar(255)
  subtitle      String?  @db.VarChar(500)
  content       String?  @db.Text
  imageUrl      String?  @map("image_url")
  imagePublicId String?  @map("image_public_id") @db.VarChar(255)
  videoUrl      String?  @map("video_url")
  buttonText    String?  @map("button_text") @db.VarChar(100)
  buttonLink    String?  @map("button_link") @db.VarChar(255)
  buttonStyle   String?  @default("primary") @map("button_style") @db.VarChar(50)
  settings      Json?    @default("{}") @db.Json
  displayOrder  Int      @default(0) @map("display_order")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId, page])
  @@index([displayOrder])
  @@map("content_blocks")
}

model RestaurantStaff {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  role         StaffRole  @default(STAFF)
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  user         User       @relation("StaffUser", fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@index([userId])
  @@index([restaurantId])
  @@map("restaurant_staff")
}

enum UnitType {
  WEIGHT
  VOLUME
  COUNT
  OTHER
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum IssueType {
  FEATURE
  BUG
  ENHANCEMENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PrepTaskStatus {
  TO_PREP
  PREPPING
  READY
  COMPLETE
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  SERVED
  CANCELLED
}

enum StaffRole {
  STAFF
  MANAGER
  OWNER
}

model CustomerProfile {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique @map("user_id")
  phoneVerified          Boolean   @default(false) @map("phone_verified")
  emailVerified          Boolean   @default(false) @map("email_verified")
  preferredContactMethod String?   @default("email") @map("preferred_contact_method") @db.VarChar(20)
  dietaryRestrictions    String?   @map("dietary_restrictions")
  specialRequests        String?   @map("special_requests")
  vipStatus              Boolean   @default(false) @map("vip_status")
  tags                   String[]
  notes                  String?
  marketingOptIn         Boolean   @default(true) @map("marketing_opt_in")
  birthday               DateTime? @db.Date
  anniversary            DateTime? @db.Date
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vipStatus])
  @@map("customer_profiles")
}
