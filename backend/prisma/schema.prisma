generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(150)
  description  String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author       User       @relation("UserRecipeCategories", fields: [userId], references: [id], onDelete: Cascade)
  recipes      Recipe[]

  @@unique([name, userId, restaurantId])
  @@index([userId])
  @@index([restaurantId])
  @@map("categories")
}

model IngredientCategory {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(150)
  description  String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  userId       Int          @map("user_id")
  restaurantId Int          @map("restaurant_id")
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author       User         @relation("UserIngredientCategories", fields: [userId], references: [id], onDelete: Cascade)
  ingredients  Ingredient[]

  @@unique([name, userId])
  @@index([userId])
  @@index([restaurantId])
  @@map("ingredient_categories")
}

model UnitOfMeasure {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(100)
  abbreviation      String?        @db.VarChar(20)
  type              UnitType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  userId            Int            @map("user_id")
  restaurantId      Int            @map("restaurant_id")
  recipeIngredients UnitQuantity[] @relation("RecipeIngredientUnit")
  recipesYield      Recipe[]       @relation("RecipeYieldUnit")
  restaurant        Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author            User           @relation("UserUnits", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@unique([abbreviation, userId])
  @@index([userId])
  @@index([restaurantId])
  @@map("units_of_measure")
}

model Ingredient {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(255)
  description          String?
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  ingredientCategoryId Int?                @map("ingredient_category_id")
  userId               Int                 @map("user_id")
  restaurantId         Int                 @map("restaurant_id")
  ingredientCategory   IngredientCategory? @relation(fields: [ingredientCategoryId], references: [id])
  restaurant           Restaurant          @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author               User                @relation("UserIngredients", fields: [userId], references: [id], onDelete: Cascade)
  recipeIngredients    UnitQuantity[]      @relation("RecipeIngredientBase")

  @@unique([name, userId])
  @@index([ingredientCategoryId])
  @@index([userId])
  @@index([restaurantId])
  @@map("ingredients")
}

model Recipe {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  description       String?
  instructions      String
  yieldQuantity     Decimal?       @map("yield_quantity") @db.Decimal(10, 2)
  yieldUnitId       Int?           @map("yield_unit_id")
  prepTimeMinutes   Int?           @map("prep_time_minutes")
  cookTimeMinutes   Int?           @map("cook_time_minutes")
  tags              String[]
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  categoryId        Int?           @map("category_id")
  userId            Int            @map("user_id")
  menuDescription   String?        @map("menu_description")
  menuTitle         String?        @map("menu_title") @db.VarChar(255)
  photoPublicId     String?        @map("photo_public_id")
  photoUrl          String?        @map("photo_url")
  restaurantId      Int            @map("restaurant_id")
  menuItems         MenuItem[]     @relation("RecipeMenuItems")
  prepTasks         PrepTask[]     @relation("RecipePrepTasks")
  recipeIngredients UnitQuantity[] @relation("RecipeParent")
  usedAsSubRecipe   UnitQuantity[] @relation("RecipeSubComponent")
  category          Category?      @relation(fields: [categoryId], references: [id])
  restaurant        Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  yieldUnit         UnitOfMeasure? @relation("RecipeYieldUnit", fields: [yieldUnitId], references: [id])

  @@index([categoryId])
  @@index([userId])
  @@index([restaurantId])
  @@map("recipes")
}

model UnitQuantity {
  id           Int           @id @default(autoincrement())
  recipeId     Int           @map("recipe_id")
  ingredientId Int?          @map("ingredient_id")
  subRecipeId  Int?          @map("sub_recipe_id")
  quantity     Decimal       @db.Decimal(10, 2)
  unitId       Int           @map("unit_id")
  order        Int           @default(0)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  ingredient   Ingredient?   @relation("RecipeIngredientBase", fields: [ingredientId], references: [id], onDelete: Restrict)
  recipe       Recipe        @relation("RecipeParent", fields: [recipeId], references: [id], onDelete: Cascade)
  subRecipe    Recipe?       @relation("RecipeSubComponent", fields: [subRecipeId], references: [id], onDelete: Restrict)
  unit         UnitOfMeasure @relation("RecipeIngredientUnit", fields: [unitId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
  @@index([subRecipeId])
  @@index([unitId])
  @@map("recipe_ingredients")
}

model PrepColumn {
  id           String     @id @default(uuid())
  name         String     @db.VarChar(255)
  order        Int        @default(0)
  color        String     @default("#1976d2") @db.VarChar(7)
  userId       Int        @map("user_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User       @relation("UserPrepColumns", fields: [userId], references: [id], onDelete: Cascade)
  tasks        PrepTask[]

  @@unique([name, userId])
  @@index([userId])
  @@index([order])
  @@map("prep_columns")
}

model User {
  id                         Int                      @id @default(autoincrement())
  email                      String                   @unique
  name                       String?
  password                   String
  createdAt                  DateTime                 @default(now()) @map("created_at")
  updatedAt                  DateTime                 @updatedAt @map("updated_at")
  role                       UserRole                 @default(USER)
  isCustomer                 Boolean                  @default(false) @map("is_customer")
  phone                      String?                  @db.VarChar(50)
  recipeCategories           Category[]               @relation("UserRecipeCategories")
  comments                   Comment[]
  customerProfile            CustomerProfile?
  emailVerificationTokens    EmailVerificationToken[]
  convertedGuestReservations GuestReservation[]       @relation("convertedToUser")
  ingredientCategories       IngredientCategory[]     @relation("UserIngredientCategories")
  ingredients                Ingredient[]             @relation("UserIngredients")
  assignedIssues             Issue[]                  @relation("AssignedIssues")
  createdIssues              Issue[]                  @relation("CreatedIssues")
  menus                      Menu[]                   @relation("UserMenus")
  orders                     Order[]                  @relation("UserOrders")
  passwordResetTokens        PasswordResetToken[]
  prepColumns                PrepColumn[]             @relation("UserPrepColumns")
  prepTasks                  PrepTask[]               @relation("UserPrepTasks")
  recipes                    Recipe[]
  refreshTokens              RefreshToken[]
  reservationLogs            ReservationLog[]
  customerReservations       Reservation[]            @relation("CustomerReservations")
  reservations               Reservation[]            @relation("UserReservations")
  restaurantStaff            RestaurantStaff[]        @relation("StaffUser")
  units                      UnitOfMeasure[]          @relation("UserUnits")

  @@map("users")
}

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  token      String   @unique @db.VarChar(500)
  expiresAt  DateTime @map("expires_at")
  deviceInfo String?  @map("device_info")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model Issue {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  description  String
  type         IssueType
  status       IssueStatus   @default(OPEN)
  priority     IssuePriority @default(MEDIUM)
  isPublic     Boolean       @default(false) @map("is_public")
  createdById  Int           @map("created_by_id")
  assignedToId Int?          @map("assigned_to_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  comments     Comment[]
  labels       IssueLabel[]
  assignedTo   User?         @relation("AssignedIssues", fields: [assignedToId], references: [id])
  createdBy    User          @relation("CreatedIssues", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@map("issues")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  isInternal Boolean  @default(false) @map("is_internal")
  issueId    Int      @map("issue_id")
  userId     Int      @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([issueId])
  @@index([userId])
  @@map("comments")
}

model Label {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  color       String       @db.VarChar(7)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  issues      IssueLabel[]

  @@map("labels")
}

model IssueLabel {
  issueId   Int      @map("issue_id")
  labelId   Int      @map("label_id")
  createdAt DateTime @default(now()) @map("created_at")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([issueId, labelId])
  @@index([issueId])
  @@index([labelId])
  @@map("issue_labels")
}

model PrepTask {
  id           String     @id @default(uuid())
  title        String     @db.VarChar(255)
  description  String?
  recipeId     Int?       @map("recipe_id")
  userId       Int        @map("user_id")
  order        Int        @default(0)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  columnId     String     @map("column_id")
  restaurantId Int        @map("restaurant_id")
  column       PrepColumn @relation(fields: [columnId], references: [id])
  recipe       Recipe?    @relation("RecipePrepTasks", fields: [recipeId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User       @relation("UserPrepTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipeId])
  @@index([columnId])
  @@index([order])
  @@index([restaurantId])
  @@map("prep_tasks")
}

model Menu {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  title               String?
  subtitle            String?
  font                String?       @default("Playfair Display")
  layout              String?       @default("single")
  showDollarSign      Boolean       @default(true) @map("show_dollar_sign")
  showDecimals        Boolean       @default(true) @map("show_decimals")
  showSectionDividers Boolean       @default(true) @map("show_section_dividers")
  logoPath            String?       @map("logo_path")
  logoPosition        String?       @default("top") @map("logo_position")
  logoSize            String?       @default("200") @map("logo_size")
  logoOffset          String?       @default("0") @map("logo_offset")
  logoVisible         Boolean       @default(true) @map("logo_visible")
  logoAlignment       String?       @default("center") @map("logo_alignment")
  backgroundColor     String?       @default("#ffffff") @map("background_color")
  textColor           String?       @default("#000000") @map("text_color")
  accentColor         String?       @default("#333333") @map("accent_color")
  titleFontSize       String?       @default("normal") @map("title_font_size")
  subtitleFontSize    String?       @default("normal") @map("subtitle_font_size")
  sectionFontSize     String?       @default("normal") @map("section_font_size")
  itemNameFontSize    String?       @default("normal") @map("item_name_font_size")
  itemDescFontSize    String?       @default("normal") @map("item_desc_font_size")
  sectionDividerStyle String?       @default("solid") @map("section_divider_style")
  sectionDividerWidth String?       @default("1px") @map("section_divider_width")
  sectionDividerColor String?       @default("#333333") @map("section_divider_color")
  richTextEnabled     Boolean       @default(false) @map("rich_text_enabled")
  isArchived          Boolean       @default(false) @map("is_archived")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  userId              Int           @map("user_id")
  restaurantId        Int           @map("restaurant_id")
  sections            MenuSection[]
  restaurant          Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author              User          @relation("UserMenus", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([restaurantId])
  @@map("menus")
}

model MenuSection {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  position Int        @default(0)
  active   Boolean    @default(true)
  menuId   Int        @map("menu_id")
  items    MenuItem[]
  menu     Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([position])
  @@map("menu_sections")
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?
  price       String?
  position    Int         @default(0)
  active      Boolean     @default(true)
  recipeId    Int?        @map("recipe_id")
  sectionId   Int         @map("section_id")
  recipe      Recipe?     @relation("RecipeMenuItems", fields: [recipeId], references: [id])
  section     MenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[] @relation("MenuItemOrderItems")

  @@index([sectionId])
  @@index([recipeId])
  @@index([position])
  @@map("menu_items")
}

model Reservation {
  id                   Int                  @id @default(autoincrement())
  customerName         String               @map("customer_name") @db.VarChar(255)
  customerPhone        String?              @map("customer_phone") @db.VarChar(50)
  customerEmail        String?              @map("customer_email") @db.VarChar(255)
  customerId           Int?                 @map("customer_id")
  restaurantId         Int                  @map("restaurant_id")
  partySize            Int                  @map("party_size")
  reservationDate      DateTime             @map("reservation_date")
  reservationTime      String               @map("reservation_time") @db.VarChar(10)
  status               ReservationStatus    @default(CONFIRMED)
  notes                String?
  specialRequests      String?              @map("special_requests")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  userId               Int?                 @map("user_id")
  actualArrivalTime    DateTime?            @map("actual_arrival_time")
  actualDepartureTime  DateTime?            @map("actual_departure_time")
  confirmationSent     Boolean              @default(false) @map("confirmation_sent")
  durationMinutes      Int                  @default(90) @map("duration_minutes")
  guestNotes           String?              @map("guest_notes")
  reminderSent         Boolean              @default(false) @map("reminder_sent")
  source               String               @default("website") @db.VarChar(20)
  tableIds             Int[]                @map("table_ids")
  confirmation_code    String?              @unique
  deposit_amount       Decimal?             @db.Decimal(10, 2)
  deposit_paid         Boolean              @default(false)
  deposit_required     Boolean              @default(false)
  dietary_restrictions String[]
  diner_id             Int?
  occasion             ReservationOccasion?
  platform_fee         Decimal?             @db.Decimal(10, 2)
  platform_source      ReservationSource    @default(RESTAURANT_STAFF)
  guestReservation     GuestReservation?
  orders               Order[]              @relation("ReservationOrders")
  reservationLogs      ReservationLog[]
  customer             User?                @relation("CustomerReservations", fields: [customerId], references: [id])
  diners               diners?              @relation(fields: [diner_id], references: [id])
  restaurant           Restaurant           @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user                 User?                @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)
  reviews              reviews?

  @@index([userId])
  @@index([customerId])
  @@index([restaurantId])
  @@index([reservationDate])
  @@index([status])
  @@index([diner_id])
  @@map("reservations")
}

model ReservationLog {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  userId        Int?        @map("user_id")
  action        String      @db.VarChar(50)
  changes       Json?       @db.Json
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  user          User?       @relation(fields: [userId], references: [id])

  @@index([reservationId])
  @@index([userId])
  @@index([action])
  @@map("reservation_logs")
}

model GuestReservation {
  id                Int         @id @default(autoincrement())
  reservationId     Int         @unique @map("reservation_id")
  guestEmail        String      @map("guest_email") @db.VarChar(255)
  guestPhone        String?     @map("guest_phone") @db.VarChar(50)
  conversionToken   String?     @unique @map("conversion_token") @db.VarChar(255)
  convertedToUserId Int?        @map("converted_to_user_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  convertedToUser   User?       @relation("convertedToUser", fields: [convertedToUserId], references: [id])
  reservation       Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([guestEmail])
  @@index([conversionToken])
  @@map("guest_reservations")
}

model Order {
  id            Int          @id @default(autoincrement())
  orderNumber   String       @unique @map("order_number") @db.VarChar(50)
  reservationId Int?         @map("reservation_id")
  restaurantId  Int          @map("restaurant_id")
  customerName  String?      @map("customer_name") @db.VarChar(255)
  status        OrderStatus  @default(NEW)
  orderType     OrderType    @default(DINE_IN) @map("order_type")
  notes         String?
  totalAmount   Decimal?     @map("total_amount") @db.Decimal(10, 2)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  userId        Int          @map("user_id")
  orderItems    OrderItem[]  @relation("OrderOrderItems")
  reservation   Reservation? @relation("ReservationOrders", fields: [reservationId], references: [id])
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user          User         @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([restaurantId])
  @@index([reservationId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  orderId    Int             @map("order_id")
  menuItemId Int             @map("menu_item_id")
  quantity   Int             @default(1)
  price      Decimal         @db.Decimal(10, 2)
  modifiers  Json?           @db.Json
  status     OrderItemStatus @default(PENDING)
  notes      String?
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  menuItem   MenuItem        @relation("MenuItemOrderItems", fields: [menuItemId], references: [id])
  order      Order           @relation("OrderOrderItems", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([menuItemId])
  @@index([status])
  @@map("order_items")
}

model ContentBlock {
  id            Int        @id @default(autoincrement())
  restaurantId  Int        @map("restaurant_id")
  page          String     @default("home") @db.VarChar(50)
  blockType     String     @map("block_type") @db.VarChar(50)
  title         String?    @db.VarChar(255)
  subtitle      String?    @db.VarChar(500)
  content       String?
  imageUrl      String?    @map("image_url")
  imagePublicId String?    @map("image_public_id") @db.VarChar(255)
  videoUrl      String?    @map("video_url")
  buttonText    String?    @map("button_text") @db.VarChar(100)
  buttonLink    String?    @map("button_link") @db.VarChar(255)
  buttonStyle   String?    @default("primary") @map("button_style") @db.VarChar(50)
  settings      Json?      @default("{}") @db.Json
  displayOrder  Int        @default(0) @map("display_order")
  isActive      Boolean    @default(true) @map("is_active")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([displayOrder])
  @@index([restaurantId, page])
  @@map("content_blocks")
}

model Restaurant {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  slug                      String                      @unique @db.VarChar(255)
  description               String?
  cuisine                   String?                     @db.VarChar(100)
  address                   String?
  city                      String?                     @db.VarChar(100)
  state                     String?                     @db.VarChar(50)
  zipCode                   String?                     @map("zip_code") @db.VarChar(20)
  country                   String?                     @db.VarChar(100)
  phone                     String?                     @db.VarChar(50)
  email                     String?                     @db.VarChar(255)
  website                   String?
  logoUrl                   String?                     @map("logo_url")
  coverImageUrl             String?                     @map("cover_image_url")
  openingHours              Json?                       @map("opening_hours")
  isActive                  Boolean                     @default(true) @map("is_active")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  businessAddress           String?                     @map("business_address")
  businessPhone             String?                     @map("business_phone")
  onboardingStatus          OnboardingStatus            @default(PENDING) @map("onboarding_status")
  onboardingSteps           Json?                       @default("{}") @map("onboarding_steps")
  ownerEmail                String?                     @map("owner_email")
  ownerName                 String?                     @map("owner_name")
  suspendedAt               DateTime?                   @map("suspended_at")
  suspendedReason           String?                     @map("suspended_reason")
  taxId                     String?                     @map("tax_id")
  verifiedAt                DateTime?                   @map("verified_at")
  verifiedBy                Int?                        @map("verified_by")
  categories                Category[]
  contentBlocks             ContentBlock[]
  customerRestaurants       CustomerRestaurant[]        @relation("RestaurantToCustomers")
  customers                 Customer[]
  diner_restaurant_profiles diner_restaurant_profiles[]
  favorite_restaurants      favorite_restaurants[]
  ingredientCategories      IngredientCategory[]
  ingredients               Ingredient[]
  loyalty_points            loyalty_points[]
  menus                     Menu[]
  orders                    Order[]
  prepColumns               PrepColumn[]
  prepTasks                 PrepTask[]
  recipes                   Recipe[]
  reservations              Reservation[]
  restaurantNotes           RestaurantNote[]
  restaurant_settings       RestaurantSettings?
  staff                     RestaurantStaff[]
  reviews                   reviews[]
  subscription              Subscription?
  supportTickets            SupportTicket[]
  unitsOfMeasure            UnitOfMeasure[]
  
  // Advanced Theming System Relations
  colorPalettes         ColorPalette[]
  typographyConfigs     TypographyConfig[]
  brandAssets           BrandAsset[]
  templateApplications  TemplateApplication[]

  @@index([slug])
  @@index([isActive])
  @@map("restaurants")
}

model RestaurantSettings {
  id                    Int        @id @default(autoincrement())
  restaurant_id         Int        @unique @map("restaurant_id")
  website_name          String?    @map("website_name")
  tagline               String?
  logo_url              String?    @map("logo_url")
  logo_public_id        String?    @map("logo_public_id")
  hero_title            String?    @map("hero_title")
  hero_subtitle         String?    @map("hero_subtitle")
  hero_image_url        String?    @map("hero_image_url")
  hero_image_public_id  String?    @map("hero_image_public_id")
  hero_cta_text         String?    @map("hero_cta_text")
  hero_cta_link         String?    @map("hero_cta_link")
  about_title           String?    @map("about_title")
  about_description     String?    @map("about_description")
  about_image_url       String?    @map("about_image_url")
  about_image_public_id String?    @map("about_image_public_id")
  primary_color         String?    @default("#1976d2") @map("primary_color")
  secondary_color       String?    @default("#dc004e") @map("secondary_color")
  accent_color          String?    @default("#333333") @map("accent_color")
  font_primary          String?    @default("Roboto, sans-serif") @map("font_primary")
  font_secondary        String?    @default("Playfair Display, serif") @map("font_secondary")
  contact_phone         String?    @map("contact_phone")
  contact_email         String?    @map("contact_email")
  contact_address       String?    @map("contact_address")
  contact_city          String?    @map("contact_city")
  contact_state         String?    @map("contact_state")
  contact_zip           String?    @map("contact_zip")
  opening_hours         Json?      @map("opening_hours")
  facebook_url          String?    @map("facebook_url")
  instagram_url         String?    @map("instagram_url")
  twitter_url           String?    @map("twitter_url")
  active_menu_ids       Int[]      @map("active_menu_ids")
  menu_display_mode     String?    @default("tabs") @map("menu_display_mode")
  footer_text           String?    @map("footer_text")
  meta_title            String?    @map("meta_title")
  meta_description      String?    @map("meta_description")
  meta_keywords         String?    @map("meta_keywords")
  
  // Info Panes Customization
  infoPanesEnabled         Boolean? @default(true) @map("info_panes_enabled")
  hoursCardTitle           String?  @default("Opening Hours") @map("hours_card_title") @db.VarChar(100)
  locationCardTitle        String?  @default("Our Location") @map("location_card_title") @db.VarChar(100)
  contactCardTitle         String?  @default("Contact Us") @map("contact_card_title") @db.VarChar(100)
  hoursCardShowDetails     Boolean? @default(true) @map("hours_card_show_details")
  locationCardShowDirections Boolean? @default(true) @map("location_card_show_directions")
  
  // Navigation Customization
  navigationEnabled        Boolean? @default(true) @map("navigation_enabled")
  navigationLayout         String?  @default("topbar") @map("navigation_layout") @db.VarChar(50)
  navigationAlignment      String?  @default("left") @map("navigation_alignment") @db.VarChar(50)
  navigationStyle          String?  @default("modern") @map("navigation_style") @db.VarChar(50)
  navigationItems          Json?    @default("[]") @map("navigation_items") @db.Json
  showMobileMenu           Boolean? @default(true) @map("show_mobile_menu")
  mobileMenuStyle          String?  @default("hamburger") @map("mobile_menu_style") @db.VarChar(50)
  
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")
  restaurants           Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@map("restaurant_settings")
}

model RestaurantStaff {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  role         StaffRole  @default(STAFF)
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User       @relation("StaffUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@index([userId])
  @@index([restaurantId])
  @@map("restaurant_staff")
}

model Customer {
  id                       Int                  @id @default(autoincrement())
  restaurantId             Int                  @default(1) @map("restaurant_id")
  email                    String               @unique
  password                 String
  firstName                String?              @map("first_name")
  lastName                 String?              @map("last_name")
  phone                    String?              @db.VarChar(50)
  emailVerified            Boolean              @default(false) @map("email_verified")
  emailVerificationToken   String?              @map("email_verification_token")
  emailVerificationExpires DateTime?            @map("email_verification_expires")
  passwordResetToken       String?              @map("password_reset_token")
  passwordResetExpires     DateTime?            @map("password_reset_expires")
  lastLogin                DateTime?            @map("last_login")
  createdAt                DateTime             @default(now()) @map("created_at")
  updatedAt                DateTime             @updatedAt @map("updated_at")
  customerPreferences      CustomerPreferences?
  restaurantLinks          CustomerRestaurant[] @relation("CustomerToRestaurants")
  sessions                 CustomerSession[]
  restaurants              Restaurant           @relation(fields: [restaurantId], references: [id])

  @@index([email])
  @@index([restaurantId])
  @@map("customers")
}

model CustomerRestaurant {
  customerId   Int        @map("customer_id")
  restaurantId Int        @map("restaurant_id")
  firstVisit   DateTime   @default(now()) @map("first_visit")
  lastVisit    DateTime   @updatedAt @map("last_visit")
  visitCount   Int        @default(0) @map("visit_count")
  totalSpent   Decimal?   @map("total_spent") @db.Decimal(10, 2)
  notes        String?
  tags         String[]
  vipStatus    Boolean    @default(false) @map("vip_status")
  preferences  Json?      @db.Json
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  customer     Customer   @relation("CustomerToRestaurants", fields: [customerId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation("RestaurantToCustomers", fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([customerId, restaurantId])
  @@index([customerId])
  @@index([restaurantId])
  @@map("customer_restaurants")
}

model CustomerPreferences {
  id                     Int      @id @default(autoincrement())
  customerId             Int      @unique @map("customer_id")
  dietaryRestrictions    String?  @map("dietary_restrictions")
  seatingPreferences     String?  @map("seating_preferences")
  specialOccasions       Json?    @map("special_occasions") @db.Json
  marketingOptIn         Boolean  @default(true) @map("marketing_opt_in")
  smsNotifications       Boolean  @default(false) @map("sms_notifications")
  preferredContactMethod String?  @default("email") @map("preferred_contact_method") @db.VarChar(20)
  notes                  String?
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  customer               Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

model CustomerSession {
  id         Int      @id @default(autoincrement())
  customerId Int      @map("customer_id")
  token      String   @unique @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("customer_sessions")
}

model CustomerProfile {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique @map("user_id")
  phoneVerified          Boolean   @default(false) @map("phone_verified")
  emailVerified          Boolean   @default(false) @map("email_verified")
  preferredContactMethod String?   @default("email") @map("preferred_contact_method") @db.VarChar(20)
  dietaryRestrictions    String?   @map("dietary_restrictions")
  specialRequests        String?   @map("special_requests")
  vipStatus              Boolean   @default(false) @map("vip_status")
  tags                   String[]
  notes                  String?
  marketingOptIn         Boolean   @default(true) @map("marketing_opt_in")
  birthday               DateTime? @db.Date
  anniversary            DateTime? @db.Date
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vipStatus])
  @@map("customer_profiles")
}

model PlatformAdmin {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  name            String
  role            PlatformRole     @default(SUPPORT)
  lastLoginAt     DateTime?        @map("last_login_at")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  actions         PlatformAction[]
  notes           RestaurantNote[]
  support_tickets SupportTicket[]

  @@map("platform_admins")
}

model PlatformAction {
  id         Int           @id @default(autoincrement())
  adminId    Int           @map("admin_id")
  action     String
  entityType String?       @map("entity_type")
  entityId   Int?          @map("entity_id")
  metadata   Json?
  ipAddress  String?       @map("ip_address")
  userAgent  String?       @map("user_agent")
  createdAt  DateTime      @default(now()) @map("created_at")
  admin      PlatformAdmin @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([entityType, entityId])
  @@map("platform_actions")
}

model Subscription {
  id                 Int                @id @default(autoincrement())
  restaurantId       Int                @unique @map("restaurant_id")
  plan               SubscriptionPlan   @default(TRIAL)
  status             SubscriptionStatus @default(TRIAL)
  stripeCustomerId   String?            @unique @map("stripe_customer_id")
  stripeSubId        String?            @unique @map("stripe_sub_id")
  currentPeriodStart DateTime           @default(now()) @map("current_period_start")
  currentPeriodEnd   DateTime           @map("current_period_end")
  cancelAt           DateTime?          @map("cancel_at")
  canceledAt         DateTime?          @map("canceled_at")
  trialEndsAt        DateTime?          @map("trial_ends_at")
  seats              Int                @default(5)
  billingEmail       String?            @map("billing_email")
  billingName        String?            @map("billing_name")
  billingAddress     Json?              @map("billing_address")
  stripePriceId      String?            @map("stripe_price_id")
  paymentMethodId    String?            @map("payment_method_id")
  lastPaymentStatus  String?            @map("last_payment_status")
  lastPaymentDate    DateTime?          @map("last_payment_date")
  metadata           Json?
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  invoices           Invoice[]
  restaurant         Restaurant         @relation(fields: [restaurantId], references: [id])
  usageRecords       UsageRecord[]

  @@index([status])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

model Invoice {
  id               Int           @id @default(autoincrement())
  subscriptionId   Int           @map("subscription_id")
  stripeInvoiceId  String?       @unique @map("stripe_invoice_id")
  amount           Decimal       @db.Decimal(10, 2)
  currency         String        @default("USD")
  status           InvoiceStatus @default(DRAFT)
  dueDate          DateTime?     @map("due_date")
  paidAt           DateTime?     @map("paid_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  hostedInvoiceUrl String?       @map("hosted_invoice_url")
  invoiceNumber    String        @unique @map("invoice_number")
  invoicePdf       String?       @map("invoice_pdf")
  invoiceUrl       String?       @map("invoice_url")
  metadata         Json?
  paymentIntentId  String?       @map("payment_intent_id")
  paymentMethod    String?       @map("payment_method")
  periodEnd        DateTime      @map("period_end")
  periodStart      DateTime      @map("period_start")
  tax              Decimal?      @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  subscription     Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([status])
  @@map("invoices")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model UsageRecord {
  id                  Int          @id @default(autoincrement())
  subscriptionId      Int          @map("subscription_id")
  metric              UsageMetric
  quantity            Int
  metadata            Json?
  periodEnd           DateTime     @map("period_end")
  periodStart         DateTime     @map("period_start")
  recordedAt          DateTime     @default(now()) @map("recorded_at")
  stripeUsageRecordId String?      @unique @map("stripe_usage_record_id")
  totalAmount         Decimal?     @map("total_amount") @db.Decimal(10, 2)
  unitAmount          Decimal?     @map("unit_amount") @db.Decimal(10, 4)
  subscription        Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId, metric])
  @@index([periodStart, periodEnd])
  @@map("usage_records")
}

model SupportTicket {
  id              Int             @id @default(autoincrement())
  restaurantId    Int             @map("restaurant_id")
  subject         String
  description     String
  status          TicketStatus    @default(OPEN)
  priority        TicketPriority  @default(MEDIUM)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  assigned_to_id  Int?
  category        String?
  resolved_at     DateTime?
  platform_admins PlatformAdmin?  @relation(fields: [assigned_to_id], references: [id])
  restaurant      Restaurant      @relation(fields: [restaurantId], references: [id])
  messages        TicketMessage[]

  @@index([assigned_to_id])
  @@index([restaurantId])
  @@index([status])
  @@map("support_tickets")
}

model TicketMessage {
  id          Int           @id @default(autoincrement())
  ticketId    Int           @map("ticket_id")
  senderId    Int           @map("sender_id")
  senderType  SenderType    @map("sender_type")
  message     String
  createdAt   DateTime      @default(now()) @map("created_at")
  attachments Json?
  is_internal Boolean       @default(false)
  sender_name String
  ticket      SupportTicket @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@map("ticket_messages")
}

model RestaurantNote {
  id           Int           @id @default(autoincrement())
  restaurantId Int           @map("restaurant_id")
  adminId      Int           @map("admin_id")
  note         String
  isInternal   Boolean       @default(true) @map("is_internal")
  createdAt    DateTime      @default(now()) @map("created_at")
  admin        PlatformAdmin @relation(fields: [adminId], references: [id])
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
  @@map("restaurant_notes")
}

model diner_notifications {
  id         Int              @id @default(autoincrement())
  diner_id   Int
  type       NotificationType
  title      String
  message    String
  metadata   Json?
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())
  diners     diners           @relation(fields: [diner_id], references: [id])

  @@index([diner_id, is_read])
}

model diner_restaurant_profiles {
  diner_id            Int
  restaurant_id       Int
  internal_notes      String?
  tags                String[]
  vip_status          Boolean       @default(false)
  spending_tier       SpendingTier?
  total_reservations  Int           @default(0)
  total_spent         Decimal?      @db.Decimal(10, 2)
  average_party_size  Float?
  no_show_count       Int           @default(0)
  cancellation_count  Int           @default(0)
  seating_preferences String?
  allergy_notes       String?
  special_occasions   Json?
  first_visit         DateTime      @default(now())
  last_visit          DateTime?
  diners              diners        @relation(fields: [diner_id], references: [id])
  restaurants         Restaurant    @relation(fields: [restaurant_id], references: [id])

  @@id([diner_id, restaurant_id])
}

model diner_sessions {
  id         Int      @id @default(autoincrement())
  diner_id   Int
  token      String   @unique @db.VarChar(255)
  expires_at DateTime
  created_at DateTime @default(now())
  diners     diners   @relation(fields: [diner_id], references: [id], onDelete: Cascade)

  @@index([token])
}

model diners {
  id                         Int                         @id @default(autoincrement())
  email                      String                      @unique
  password                   String
  first_name                 String?
  last_name                  String?
  phone                      String?                     @db.VarChar(50)
  phone_verified             Boolean                     @default(false)
  email_verified             Boolean                     @default(false)
  profile_photo              String?
  bio                        String?
  email_opt_in               Boolean                     @default(true)
  sms_opt_in                 Boolean                     @default(false)
  marketing_opt_in           Boolean                     @default(true)
  email_verification_token   String?
  email_verification_expires DateTime?
  password_reset_token       String?
  password_reset_expires     DateTime?
  is_active                  Boolean                     @default(true)
  joined_at                  DateTime                    @default(now())
  last_active_at             DateTime?
  diner_notifications        diner_notifications[]
  diner_restaurant_profiles  diner_restaurant_profiles[]
  diner_sessions             diner_sessions[]
  favorite_restaurants       favorite_restaurants[]
  loyalty_points             loyalty_points[]
  reservations               Reservation[]
  reviews                    reviews[]

  @@index([email])
}

model favorite_restaurants {
  diner_id      Int
  restaurant_id Int
  added_at      DateTime   @default(now())
  diners        diners     @relation(fields: [diner_id], references: [id])
  restaurants   Restaurant @relation(fields: [restaurant_id], references: [id])

  @@id([diner_id, restaurant_id])
}

model loyalty_points {
  id             Int         @id @default(autoincrement())
  diner_id       Int
  restaurant_id  Int?
  points         Int
  reason         String
  reservation_id Int?
  earned_at      DateTime    @default(now())
  expires_at     DateTime?
  diners         diners      @relation(fields: [diner_id], references: [id])
  restaurants    Restaurant? @relation(fields: [restaurant_id], references: [id])

  @@index([diner_id])
}

model reviews {
  id              Int          @id @default(autoincrement())
  diner_id        Int
  restaurant_id   Int
  reservation_id  Int          @unique
  overall_rating  Int
  food_rating     Int?
  service_rating  Int?
  ambiance_rating Int?
  review_text     String?
  would_recommend Boolean?
  status          ReviewStatus @default(PENDING)
  moderated_at    DateTime?
  moderated_by    Int?
  created_at      DateTime     @default(now())
  updated_at      DateTime
  diners          diners       @relation(fields: [diner_id], references: [id])
  reservations    Reservation  @relation(fields: [reservation_id], references: [id])
  restaurants     Restaurant   @relation(fields: [restaurant_id], references: [id])

  @@index([restaurant_id, status])
}

enum UnitType {
  WEIGHT
  VOLUME
  COUNT
  OTHER
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum IssueType {
  FEATURE
  BUG
  ENHANCEMENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PrepTaskStatus {
  TO_PREP
  PREPPING
  READY
  COMPLETE
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  SERVED
  CANCELLED
}

enum StaffRole {
  STAFF
  MANAGER
  OWNER
}

enum OnboardingStatus {
  PENDING
  EMAIL_VERIFIED
  INFO_SUBMITTED
  PAYMENT_ADDED
  VERIFIED
  ACTIVE
  REJECTED
}

enum SubscriptionPlan {
  TRIAL
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  FAILED
  REFUNDED
  DRAFT
}

enum NotificationType {
  RESERVATION_CONFIRMED
  RESERVATION_REMINDER
  RESERVATION_CANCELLED
  REVIEW_REQUEST
  MARKETING
  SYSTEM
}

enum PlatformRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
  BILLING
}

enum ReservationOccasion {
  BIRTHDAY
  ANNIVERSARY
  DATE_NIGHT
  BUSINESS_MEAL
  SPECIAL_CELEBRATION
  OTHER
}

enum ReservationSource {
  PLATFORM_WEB
  PLATFORM_APP
  RESTAURANT_WIDGET
  RESTAURANT_STAFF
  PHONE
  WALK_IN
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  HIDDEN
  REMOVED
}

enum SenderType {
  PLATFORM_ADMIN
  RESTAURANT_USER
  SYSTEM
}

enum SpendingTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum UsageMetric {
  RESERVATIONS
  ACTIVE_STAFF
  STORAGE_MB
  API_CALLS
}

// Advanced Theming System Models

model ColorPalette {
  id              String     @id @default(uuid())
  restaurantId    Int        @map("restaurant_id")
  name            String     @db.VarChar(100)
  primaryColor    String     @map("primary_color") @db.VarChar(7)
  secondaryColor  String     @map("secondary_color") @db.VarChar(7)
  accentColor     String     @map("accent_color") @db.VarChar(7)
  backgroundColor String     @map("background_color") @db.VarChar(7)
  textColor       String     @map("text_color") @db.VarChar(7)
  successColor    String     @default("#4caf50") @map("success_color") @db.VarChar(7)
  warningColor    String     @default("#ff9800") @map("warning_color") @db.VarChar(7)
  errorColor      String     @default("#f44336") @map("error_color") @db.VarChar(7)
  contrastRatio   Decimal?   @map("contrast_ratio") @db.Decimal(4, 2)
  wcagLevel       String?    @map("wcag_level") @db.VarChar(3)
  isActive        Boolean    @default(false) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId], map: "color_palettes_restaurant_active_unique")
  @@index([restaurantId])
  @@index([isActive])
  @@map("color_palettes")
}

model TypographyConfig {
  id               String     @id @default(uuid())
  restaurantId     Int        @map("restaurant_id")
  name             String     @default("Custom Typography") @db.VarChar(100)
  headingFontFamily String    @map("heading_font_family") @db.VarChar(100)
  bodyFontFamily   String     @map("body_font_family") @db.VarChar(100)
  fontSizes        Json       @map("font_sizes")
  lineHeights      Json       @map("line_heights")
  letterSpacing    Json       @map("letter_spacing")
  fontWeights      Json       @map("font_weights")
  isActive         Boolean    @default(false) @map("is_active")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId], map: "typography_configs_restaurant_active_unique")
  @@index([restaurantId])
  @@index([isActive])
  @@map("typography_configs")
}

model RestaurantTemplate {
  id                   String                @id @default(uuid())
  name                 String                @db.VarChar(100)
  category             String                @db.VarChar(50)
  description          String?
  previewUrl           String?               @map("preview_url") @db.VarChar(255)
  layoutConfig         Json                  @map("layout_config")
  defaultColors        Json                  @map("default_colors")
  defaultTypography    Json                  @map("default_typography")
  features             Json                  @default("[]")
  isPremium            Boolean               @default(false) @map("is_premium")
  isActive             Boolean               @default(true) @map("is_active")
  sortOrder            Int                   @default(0) @map("sort_order")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  templateApplications TemplateApplication[]

  @@index([category])
  @@index([isActive])
  @@index([isPremium])
  @@map("restaurant_templates")
}

model BrandAsset {
  id           String     @id @default(uuid())
  restaurantId Int        @map("restaurant_id")
  assetType    String     @map("asset_type") @db.VarChar(50)
  fileName     String     @map("file_name") @db.VarChar(255)
  fileUrl      String     @map("file_url") @db.VarChar(255)
  fileSize     Int?       @map("file_size")
  mimeType     String?    @map("mime_type") @db.VarChar(100)
  dimensions   Json?
  altText      String?    @map("alt_text") @db.VarChar(255)
  isPrimary    Boolean    @default(false) @map("is_primary")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
  @@index([assetType])
  @@index([isPrimary])
  @@map("brand_assets")
}

model TemplateApplication {
  id             String             @id @default(uuid())
  restaurantId   Int                @map("restaurant_id")
  templateId     String             @map("template_id")
  customizations Json               @default("{}")
  isActive       Boolean            @default(true) @map("is_active")
  appliedAt      DateTime           @default(now()) @map("applied_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  restaurant     Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  template       RestaurantTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([restaurantId], map: "template_applications_restaurant_active_unique")
  @@index([restaurantId])
  @@index([templateId])
  @@index([isActive])
  @@map("template_applications")
}
