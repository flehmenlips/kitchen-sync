generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      Int      @map("user_id")
  author      User     @relation("UserRecipeCategories", fields: [userId], references: [id], onDelete: Cascade)
  recipes     Recipe[]

  @@unique([name, userId])
  @@index([userId])
  @@map("categories")
}

model IngredientCategory {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(150)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  userId      Int          @map("user_id")
  author      User         @relation("UserIngredientCategories", fields: [userId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]

  @@unique([name, userId])
  @@index([userId])
  @@map("ingredient_categories")
}

model UnitOfMeasure {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(100)
  abbreviation      String?        @db.VarChar(20)
  type              UnitType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  userId            Int            @map("user_id")
  recipeIngredients UnitQuantity[] @relation("RecipeIngredientUnit")
  recipesYield      Recipe[]       @relation("RecipeYieldUnit")
  author            User           @relation("UserUnits", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@unique([abbreviation, userId])
  @@index([userId])
  @@map("units_of_measure")
}

model Ingredient {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(255)
  description          String?
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  ingredientCategoryId Int?                @map("ingredient_category_id")
  userId               Int                 @map("user_id")
  ingredientCategory   IngredientCategory? @relation(fields: [ingredientCategoryId], references: [id])
  author               User                @relation("UserIngredients", fields: [userId], references: [id], onDelete: Cascade)
  recipeIngredients    UnitQuantity[]      @relation("RecipeIngredientBase")

  @@unique([name, userId])
  @@index([ingredientCategoryId])
  @@index([userId])
  @@map("ingredients")
}

model Recipe {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  description       String?
  instructions      String
  yieldQuantity     Decimal?       @map("yield_quantity") @db.Decimal(10, 2)
  yieldUnitId       Int?           @map("yield_unit_id")
  prepTimeMinutes   Int?           @map("prep_time_minutes")
  cookTimeMinutes   Int?           @map("cook_time_minutes")
  tags              String[]
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  categoryId        Int?           @map("category_id")
  userId            Int            @map("user_id")
  photoUrl          String?        @map("photo_url")
  photoPublicId     String?        @map("photo_public_id")
  menuTitle         String?        @map("menu_title") @db.VarChar(255)
  menuDescription   String?        @map("menu_description")
  menuItems         MenuItem[]     @relation("RecipeMenuItems")
  prepTasks         PrepTask[]     @relation("RecipePrepTasks")
  recipeIngredients UnitQuantity[] @relation("RecipeParent")
  usedAsSubRecipe   UnitQuantity[] @relation("RecipeSubComponent")
  category          Category?      @relation(fields: [categoryId], references: [id])
  author            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  yieldUnit         UnitOfMeasure? @relation("RecipeYieldUnit", fields: [yieldUnitId], references: [id])

  @@index([categoryId])
  @@index([userId])
  @@map("recipes")
}

model UnitQuantity {
  id           Int           @id @default(autoincrement())
  recipeId     Int           @map("recipe_id")
  ingredientId Int?          @map("ingredient_id")
  subRecipeId  Int?          @map("sub_recipe_id")
  quantity     Decimal       @db.Decimal(10, 2)
  unitId       Int           @map("unit_id")
  order        Int           @default(0)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  ingredient   Ingredient?   @relation("RecipeIngredientBase", fields: [ingredientId], references: [id], onDelete: Restrict)
  recipe       Recipe        @relation("RecipeParent", fields: [recipeId], references: [id], onDelete: Cascade)
  subRecipe    Recipe?       @relation("RecipeSubComponent", fields: [subRecipeId], references: [id], onDelete: Restrict)
  unit         UnitOfMeasure @relation("RecipeIngredientUnit", fields: [unitId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
  @@index([subRecipeId])
  @@index([unitId])
  @@map("recipe_ingredients")
}

model PrepColumn {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255)
  order     Int        @default(0)
  color     String     @default("#1976d2") @db.VarChar(7)
  userId    Int        @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation("UserPrepColumns", fields: [userId], references: [id], onDelete: Cascade)
  tasks     PrepTask[]

  @@unique([name, userId])
  @@index([userId])
  @@index([order])
  @@map("prep_columns")
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  name                 String?
  password             String
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  role                 UserRole             @default(USER)
  recipeCategories     Category[]           @relation("UserRecipeCategories")
  comments             Comment[]
  ingredientCategories IngredientCategory[] @relation("UserIngredientCategories")
  ingredients          Ingredient[]         @relation("UserIngredients")
  assignedIssues       Issue[]              @relation("AssignedIssues")
  createdIssues        Issue[]              @relation("CreatedIssues")
  menus                Menu[]               @relation("UserMenus")
  prepColumns          PrepColumn[]         @relation("UserPrepColumns")
  prepTasks            PrepTask[]           @relation("UserPrepTasks")
  recipes              Recipe[]
  units                UnitOfMeasure[]      @relation("UserUnits")
  reservations         Reservation[]        @relation("UserReservations")
  orders               Order[]              @relation("UserOrders")

  @@map("users")
}

model Issue {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  description  String
  type         IssueType
  status       IssueStatus   @default(OPEN)
  priority     IssuePriority @default(MEDIUM)
  isPublic     Boolean       @default(false) @map("is_public")
  createdById  Int           @map("created_by_id")
  assignedToId Int?          @map("assigned_to_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  comments     Comment[]
  labels       IssueLabel[]
  assignedTo   User?         @relation("AssignedIssues", fields: [assignedToId], references: [id])
  createdBy    User          @relation("CreatedIssues", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@map("issues")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  isInternal Boolean  @default(false) @map("is_internal")
  issueId    Int      @map("issue_id")
  userId     Int      @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([issueId])
  @@index([userId])
  @@map("comments")
}

model Label {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  color       String       @db.VarChar(7)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  issues      IssueLabel[]

  @@map("labels")
}

model IssueLabel {
  issueId   Int      @map("issue_id")
  labelId   Int      @map("label_id")
  createdAt DateTime @default(now()) @map("created_at")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([issueId, labelId])
  @@index([issueId])
  @@index([labelId])
  @@map("issue_labels")
}

model PrepTask {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(255)
  description String?
  recipeId    Int?       @map("recipe_id")
  userId      Int        @map("user_id")
  order       Int        @default(0)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  columnId    String     @map("column_id")
  column      PrepColumn @relation(fields: [columnId], references: [id])
  recipe      Recipe?    @relation("RecipePrepTasks", fields: [recipeId], references: [id])
  user        User       @relation("UserPrepTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipeId])
  @@index([columnId])
  @@index([order])
  @@map("prep_tasks")
}

model Menu {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  title               String?
  subtitle            String?
  font                String?       @default("Playfair Display")
  layout              String?       @default("single")
  showDollarSign      Boolean       @default(true) @map("show_dollar_sign")
  showDecimals        Boolean       @default(true) @map("show_decimals")
  showSectionDividers Boolean       @default(true) @map("show_section_dividers")
  logoPath            String?       @map("logo_path")
  logoPosition        String?       @default("top") @map("logo_position")
  logoSize            String?       @default("200") @map("logo_size")
  logoOffset          String?       @default("0") @map("logo_offset")
  logoVisible         Boolean       @default(true) @map("logo_visible")
  logoAlignment       String?       @default("center") @map("logo_alignment")
  backgroundColor     String?       @default("#ffffff") @map("background_color")
  textColor           String?       @default("#000000") @map("text_color")
  accentColor         String?       @default("#333333") @map("accent_color")
  titleFontSize       String?       @default("normal") @map("title_font_size")
  subtitleFontSize    String?       @default("normal") @map("subtitle_font_size")
  sectionFontSize     String?       @default("normal") @map("section_font_size")
  itemNameFontSize    String?       @default("normal") @map("item_name_font_size")
  itemDescFontSize    String?       @default("normal") @map("item_desc_font_size")
  sectionDividerStyle String?       @default("solid") @map("section_divider_style")
  sectionDividerWidth String?       @default("1px") @map("section_divider_width")
  sectionDividerColor String?       @default("#333333") @map("section_divider_color")
  richTextEnabled     Boolean       @default(false) @map("rich_text_enabled")
  isArchived          Boolean       @default(false) @map("is_archived")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  userId              Int           @map("user_id")
  sections            MenuSection[]
  author              User          @relation("UserMenus", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("menus")
}

model MenuSection {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  position Int        @default(0)
  active   Boolean    @default(true)
  menuId   Int        @map("menu_id")
  items    MenuItem[]
  menu     Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([position])
  @@map("menu_sections")
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?
  price       String?
  position    Int         @default(0)
  active      Boolean     @default(true)
  recipeId    Int?        @map("recipe_id")
  sectionId   Int         @map("section_id")
  orderItems  OrderItem[] @relation("MenuItemOrderItems")
  recipe      Recipe?     @relation("RecipeMenuItems", fields: [recipeId], references: [id])
  section     MenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([recipeId])
  @@index([position])
  @@map("menu_items")
}

model Reservation {
  id               Int                @id @default(autoincrement())
  customerName     String             @db.VarChar(255) @map("customer_name")
  customerPhone    String?            @db.VarChar(50) @map("customer_phone")
  customerEmail    String?            @db.VarChar(255) @map("customer_email")
  partySize        Int                @map("party_size")
  reservationDate  DateTime           @map("reservation_date")
  reservationTime  String             @db.VarChar(10) @map("reservation_time")
  status           ReservationStatus  @default(CONFIRMED)
  notes            String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  userId           Int                @map("user_id")
  user             User               @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)
  orders           Order[]            @relation("ReservationOrders")

  @@index([userId])
  @@index([reservationDate])
  @@index([status])
  @@map("reservations")
}

model Order {
  id             Int         @id @default(autoincrement())
  orderNumber    String      @unique @db.VarChar(50) @map("order_number")
  reservationId  Int?        @map("reservation_id")
  customerName   String?     @db.VarChar(255) @map("customer_name")
  status         OrderStatus @default(NEW)
  orderType      OrderType   @default(DINE_IN) @map("order_type")
  notes          String?
  totalAmount    Decimal?    @db.Decimal(10, 2) @map("total_amount")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  userId         Int         @map("user_id")
  user           User        @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  reservation    Reservation? @relation("ReservationOrders", fields: [reservationId], references: [id])
  orderItems     OrderItem[] @relation("OrderOrderItems")

  @@index([userId])
  @@index([reservationId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id          Int            @id @default(autoincrement())
  orderId     Int            @map("order_id")
  menuItemId  Int            @map("menu_item_id")
  quantity    Int            @default(1)
  price       Decimal        @db.Decimal(10, 2)
  modifiers   Json?          @db.Json
  status      OrderItemStatus @default(PENDING)
  notes       String?
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  order       Order          @relation("OrderOrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  menuItem    MenuItem       @relation("MenuItemOrderItems", fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
  @@index([status])
  @@map("order_items")
}

enum UnitType {
  WEIGHT
  VOLUME
  COUNT
  OTHER
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum IssueType {
  FEATURE
  BUG
  ENHANCEMENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PrepTaskStatus {
  TO_PREP
  PREPPING
  READY
  COMPLETE
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  SERVED
  CANCELLED
}
