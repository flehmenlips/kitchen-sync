generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(150)
  description  String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  author       User       @relation("UserRecipeCategories", fields: [userId], references: [id], onDelete: Cascade)
  recipes      Recipe[]

  @@unique([name, userId, restaurantId])
  @@index([userId])
  @@index([restaurantId])
  @@map("categories")
}

model IngredientCategory {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(150)
  description  String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  userId       Int          @map("user_id")
  restaurantId Int          @map("restaurant_id")
  author       User         @relation("UserIngredientCategories", fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  ingredients  Ingredient[]

  @@unique([name, userId])
  @@index([userId])
  @@index([restaurantId])
  @@map("ingredient_categories")
}

model UnitOfMeasure {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(100)
  abbreviation      String?        @db.VarChar(20)
  type              UnitType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  userId            Int            @map("user_id")
  restaurantId      Int            @map("restaurant_id")
  recipeIngredients UnitQuantity[] @relation("RecipeIngredientUnit")
  recipesYield      Recipe[]       @relation("RecipeYieldUnit")
  author            User           @relation("UserUnits", fields: [userId], references: [id], onDelete: Cascade)
  restaurant        Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@unique([abbreviation, userId])
  @@index([userId])
  @@index([restaurantId])
  @@map("units_of_measure")
}

model Ingredient {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(255)
  description          String?
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  ingredientCategoryId Int?                @map("ingredient_category_id")
  userId               Int                 @map("user_id")
  restaurantId         Int                 @map("restaurant_id")
  ingredientCategory   IngredientCategory? @relation(fields: [ingredientCategoryId], references: [id])
  author               User                @relation("UserIngredients", fields: [userId], references: [id], onDelete: Cascade)
  recipeIngredients    UnitQuantity[]      @relation("RecipeIngredientBase")
  restaurant           Restaurant          @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([ingredientCategoryId])
  @@index([userId])
  @@index([restaurantId])
  @@map("ingredients")
}

model Recipe {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  description       String?
  instructions      String
  yieldQuantity     Decimal?       @map("yield_quantity") @db.Decimal(10, 2)
  yieldUnitId       Int?           @map("yield_unit_id")
  prepTimeMinutes   Int?           @map("prep_time_minutes")
  cookTimeMinutes   Int?           @map("cook_time_minutes")
  tags              String[]
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  categoryId        Int?           @map("category_id")
  userId            Int            @map("user_id")
  restaurantId      Int            @map("restaurant_id")
  menuDescription   String?        @map("menu_description")
  menuTitle         String?        @map("menu_title") @db.VarChar(255)
  photoPublicId     String?        @map("photo_public_id")
  photoUrl          String?        @map("photo_url")
  menuItems         MenuItem[]     @relation("RecipeMenuItems")
  prepTasks         PrepTask[]     @relation("RecipePrepTasks")
  recipeIngredients UnitQuantity[] @relation("RecipeParent")
  usedAsSubRecipe   UnitQuantity[] @relation("RecipeSubComponent")
  category          Category?      @relation(fields: [categoryId], references: [id])
  author            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  yieldUnit         UnitOfMeasure? @relation("RecipeYieldUnit", fields: [yieldUnitId], references: [id])
  restaurant        Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([userId])
  @@index([restaurantId])
  @@map("recipes")
}

model UnitQuantity {
  id           Int           @id @default(autoincrement())
  recipeId     Int           @map("recipe_id")
  ingredientId Int?          @map("ingredient_id")
  subRecipeId  Int?          @map("sub_recipe_id")
  quantity     Decimal       @db.Decimal(10, 2)
  unitId       Int           @map("unit_id")
  order        Int           @default(0)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  ingredient   Ingredient?   @relation("RecipeIngredientBase", fields: [ingredientId], references: [id], onDelete: Restrict)
  recipe       Recipe        @relation("RecipeParent", fields: [recipeId], references: [id], onDelete: Cascade)
  subRecipe    Recipe?       @relation("RecipeSubComponent", fields: [subRecipeId], references: [id], onDelete: Restrict)
  unit         UnitOfMeasure @relation("RecipeIngredientUnit", fields: [unitId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
  @@index([subRecipeId])
  @@index([unitId])
  @@map("recipe_ingredients")
}

model PrepColumn {
  id           String     @id @default(uuid())
  name         String     @db.VarChar(255)
  order        Int        @default(0)
  color        String     @default("#1976d2") @db.VarChar(7)
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  user         User       @relation("UserPrepColumns", fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  tasks        PrepTask[]

  @@unique([name, userId])
  @@index([userId])
  @@index([order])
  @@map("prep_columns")
}

model User {
  id                         Int                      @id @default(autoincrement())
  email                      String                   @unique
  name                       String?
  password                   String
  createdAt                  DateTime                 @default(now()) @map("created_at")
  updatedAt                  DateTime                 @updatedAt @map("updated_at")
  role                       UserRole                 @default(USER)
  isCustomer                 Boolean                  @default(false) @map("is_customer")
  phone                      String?                  @db.VarChar(50)
  recipeCategories           Category[]               @relation("UserRecipeCategories")
  comments                   Comment[]
  customerProfile            CustomerProfile?
  emailVerificationTokens    EmailVerificationToken[]
  convertedGuestReservations GuestReservation[]       @relation("convertedToUser")
  ingredientCategories       IngredientCategory[]     @relation("UserIngredientCategories")
  ingredients                Ingredient[]             @relation("UserIngredients")
  assignedIssues             Issue[]                  @relation("AssignedIssues")
  createdIssues              Issue[]                  @relation("CreatedIssues")
  menus                      Menu[]                   @relation("UserMenus")
  orders                     Order[]                  @relation("UserOrders")
  passwordResetTokens        PasswordResetToken[]
  prepColumns                PrepColumn[]             @relation("UserPrepColumns")
  prepTasks                  PrepTask[]               @relation("UserPrepTasks")
  recipes                    Recipe[]
  refreshTokens              RefreshToken[]
  reservationLogs            ReservationLog[]
  customerReservations       Reservation[]            @relation("CustomerReservations")
  reservations               Reservation[]            @relation("UserReservations")
  restaurantStaff            RestaurantStaff[]        @relation("StaffUser")
  units                      UnitOfMeasure[]          @relation("UserUnits")

  @@map("users")
}

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([token], map: "idx_email_verification_tokens_token")
  @@index([userId], map: "idx_email_verification_tokens_user_id")
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([token], map: "idx_password_reset_tokens_token")
  @@index([userId], map: "idx_password_reset_tokens_user_id")
  @@map("password_reset_tokens")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  token      String   @unique @db.VarChar(500)
  expiresAt  DateTime @map("expires_at")
  deviceInfo String?  @map("device_info")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([token], map: "idx_refresh_tokens_token")
  @@index([userId], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}

model Issue {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  description  String
  type         IssueType
  status       IssueStatus   @default(OPEN)
  priority     IssuePriority @default(MEDIUM)
  isPublic     Boolean       @default(false) @map("is_public")
  createdById  Int           @map("created_by_id")
  assignedToId Int?          @map("assigned_to_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  comments     Comment[]
  labels       IssueLabel[]
  assignedTo   User?         @relation("AssignedIssues", fields: [assignedToId], references: [id])
  createdBy    User          @relation("CreatedIssues", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@map("issues")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  isInternal Boolean  @default(false) @map("is_internal")
  issueId    Int      @map("issue_id")
  userId     Int      @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([issueId])
  @@index([userId])
  @@map("comments")
}

model Label {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  color       String       @db.VarChar(7)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  issues      IssueLabel[]

  @@map("labels")
}

model IssueLabel {
  issueId   Int      @map("issue_id")
  labelId   Int      @map("label_id")
  createdAt DateTime @default(now()) @map("created_at")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([issueId, labelId])
  @@index([issueId])
  @@index([labelId])
  @@map("issue_labels")
}

model PrepTask {
  id           String     @id @default(uuid())
  title        String     @db.VarChar(255)
  description  String?
  recipeId     Int?       @map("recipe_id")
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  order        Int        @default(0)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  columnId     String     @map("column_id")
  column       PrepColumn @relation(fields: [columnId], references: [id])
  recipe       Recipe?    @relation("RecipePrepTasks", fields: [recipeId], references: [id])
  user         User       @relation("UserPrepTasks", fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipeId])
  @@index([columnId])
  @@index([order])
  @@index([restaurantId])
  @@map("prep_tasks")
}

model Menu {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  title               String?
  subtitle            String?
  font                String?       @default("Playfair Display")
  layout              String?       @default("single")
  showDollarSign      Boolean       @default(true) @map("show_dollar_sign")
  showDecimals        Boolean       @default(true) @map("show_decimals")
  showSectionDividers Boolean       @default(true) @map("show_section_dividers")
  logoPath            String?       @map("logo_path")
  logoPosition        String?       @default("top") @map("logo_position")
  logoSize            String?       @default("200") @map("logo_size")
  logoOffset          String?       @default("0") @map("logo_offset")
  logoVisible         Boolean       @default(true) @map("logo_visible")
  logoAlignment       String?       @default("center") @map("logo_alignment")
  backgroundColor     String?       @default("#ffffff") @map("background_color")
  textColor           String?       @default("#000000") @map("text_color")
  accentColor         String?       @default("#333333") @map("accent_color")
  titleFontSize       String?       @default("normal") @map("title_font_size")
  subtitleFontSize    String?       @default("normal") @map("subtitle_font_size")
  sectionFontSize     String?       @default("normal") @map("section_font_size")
  itemNameFontSize    String?       @default("normal") @map("item_name_font_size")
  itemDescFontSize    String?       @default("normal") @map("item_desc_font_size")
  sectionDividerStyle String?       @default("solid") @map("section_divider_style")
  sectionDividerWidth String?       @default("1px") @map("section_divider_width")
  sectionDividerColor String?       @default("#333333") @map("section_divider_color")
  richTextEnabled     Boolean       @default(false) @map("rich_text_enabled")
  isArchived          Boolean       @default(false) @map("is_archived")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  userId              Int           @map("user_id")
  restaurantId        Int           @map("restaurant_id")
  sections            MenuSection[]
  author              User          @relation("UserMenus", fields: [userId], references: [id], onDelete: Cascade)
  restaurant          Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([restaurantId])
  @@map("menus")
}

model MenuSection {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  position Int        @default(0)
  active   Boolean    @default(true)
  menuId   Int        @map("menu_id")
  items    MenuItem[]
  menu     Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([position])
  @@map("menu_sections")
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?
  price       String?
  position    Int         @default(0)
  active      Boolean     @default(true)
  recipeId    Int?        @map("recipe_id")
  sectionId   Int         @map("section_id")
  recipe      Recipe?     @relation("RecipeMenuItems", fields: [recipeId], references: [id])
  section     MenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[] @relation("MenuItemOrderItems")

  @@index([sectionId])
  @@index([recipeId])
  @@index([position])
  @@map("menu_items")
}

model Reservation {
  id                  Int               @id @default(autoincrement())
  customerName        String            @map("customer_name") @db.VarChar(255)
  customerPhone       String?           @map("customer_phone") @db.VarChar(50)
  customerEmail       String?           @map("customer_email") @db.VarChar(255)
  customerId          Int?              @map("customer_id")
  restaurantId        Int               @map("restaurant_id")
  partySize           Int               @map("party_size")
  reservationDate     DateTime          @map("reservation_date")
  reservationTime     String            @map("reservation_time") @db.VarChar(10)
  status              ReservationStatus @default(CONFIRMED)
  notes               String?
  specialRequests     String?           @map("special_requests")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  userId              Int?              @map("user_id")
  actualArrivalTime   DateTime?         @map("actual_arrival_time")
  actualDepartureTime DateTime?         @map("actual_departure_time")
  confirmationSent    Boolean           @default(false) @map("confirmation_sent")
  durationMinutes     Int               @default(90) @map("duration_minutes")
  guestNotes          String?           @map("guest_notes")
  reminderSent        Boolean           @default(false) @map("reminder_sent")
  source              String            @default("website") @db.VarChar(20)
  tableIds            Int[]             @map("table_ids")

  // Platform fields
  dinerId             Int?                 @map("diner_id")
  occasion            ReservationOccasion?
  dietaryRestrictions String[]             @map("dietary_restrictions")
  platformSource      ReservationSource    @default(RESTAURANT_STAFF) @map("platform_source")
  platformFee         Decimal?             @map("platform_fee") @db.Decimal(10, 2)
  confirmationCode    String?              @unique @map("confirmation_code")

  // Ticketing/Deposit
  depositRequired Boolean  @default(false) @map("deposit_required")
  depositAmount   Decimal? @map("deposit_amount") @db.Decimal(10, 2)
  depositPaid     Boolean  @default(false) @map("deposit_paid")

  // Relations
  guestReservation GuestReservation?
  orders           Order[]           @relation("ReservationOrders")
  reservationLogs  ReservationLog[]
  customer         User?             @relation("CustomerReservations", fields: [customerId], references: [id])
  restaurant       Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user             User?             @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)
  diner            Diner?            @relation("DinerReservations", fields: [dinerId], references: [id])
  review           Review?

  @@index([userId])
  @@index([customerId])
  @@index([restaurantId])
  @@index([reservationDate])
  @@index([status])
  @@index([dinerId])
  @@map("reservations")
}

model ReservationLog {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  userId        Int?        @map("user_id")
  action        String      @db.VarChar(50)
  changes       Json?       @db.Json
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  user          User?       @relation(fields: [userId], references: [id])

  @@index([reservationId])
  @@index([userId])
  @@index([action])
  @@index([action], map: "idx_reservation_logs_action")
  @@index([reservationId], map: "idx_reservation_logs_reservation_id")
  @@index([userId], map: "idx_reservation_logs_user_id")
  @@map("reservation_logs")
}

model GuestReservation {
  id                Int         @id @default(autoincrement())
  reservationId     Int         @unique @map("reservation_id")
  guestEmail        String      @map("guest_email") @db.VarChar(255)
  guestPhone        String?     @map("guest_phone") @db.VarChar(50)
  conversionToken   String?     @unique @map("conversion_token") @db.VarChar(255)
  convertedToUserId Int?        @map("converted_to_user_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  convertedToUser   User?       @relation("convertedToUser", fields: [convertedToUserId], references: [id])
  reservation       Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([guestEmail])
  @@index([conversionToken])
  @@index([guestEmail], map: "idx_guest_reservations_email")
  @@index([conversionToken], map: "idx_guest_reservations_token")
  @@map("guest_reservations")
}

model Order {
  id            Int          @id @default(autoincrement())
  orderNumber   String       @unique @map("order_number") @db.VarChar(50)
  reservationId Int?         @map("reservation_id")
  restaurantId  Int          @map("restaurant_id")
  customerName  String?      @map("customer_name") @db.VarChar(255)
  status        OrderStatus  @default(NEW)
  orderType     OrderType    @default(DINE_IN) @map("order_type")
  notes         String?
  totalAmount   Decimal?     @map("total_amount") @db.Decimal(10, 2)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  userId        Int          @map("user_id")
  orderItems    OrderItem[]  @relation("OrderOrderItems")
  reservation   Reservation? @relation("ReservationOrders", fields: [reservationId], references: [id])
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user          User         @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([restaurantId])
  @@index([reservationId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  orderId    Int             @map("order_id")
  menuItemId Int             @map("menu_item_id")
  quantity   Int             @default(1)
  price      Decimal         @db.Decimal(10, 2)
  modifiers  Json?           @db.Json
  status     OrderItemStatus @default(PENDING)
  notes      String?
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  menuItem   MenuItem        @relation("MenuItemOrderItems", fields: [menuItemId], references: [id])
  order      Order           @relation("OrderOrderItems", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([menuItemId])
  @@index([status])
  @@map("order_items")
}

model Restaurant {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  // NEW FIELDS for chains and website builder
  isChain               Boolean @default(false) @map("is_chain")
  parentRestaurantId    Int?    @map("parent_restaurant_id")
  chainName             String? @map("chain_name")
  websiteBuilderEnabled Boolean @default(false) @map("website_builder_enabled")
  customDomain          String? @map("custom_domain")
  websiteSettings       Json?   @map("website_settings")
  chainSettings         Json?   @map("chain_settings")

  // Contact Info
  address String?
  city    String?
  state   String?
  zipCode String? @map("zip_code")
  country String?
  phone   String?
  email   String?
  website String?

  // Business Info
  cuisine       String?
  description   String?
  logoUrl       String? @map("logo_url")
  coverImageUrl String? @map("cover_image_url")
  openingHours  Json?   @map("opening_hours")

  // Owner Info
  ownerName       String? @map("owner_name")
  ownerEmail      String? @map("owner_email")
  businessPhone   String? @map("business_phone")
  businessAddress String? @map("business_address")
  taxId           String? @map("tax_id")

  // Status
  isActive         Boolean          @default(true) @map("is_active")
  onboardingStatus OnboardingStatus @default(PENDING) @map("onboarding_status")
  onboardingSteps  Json?            @default("{}") @map("onboarding_steps")
  verifiedAt       DateTime?        @map("verified_at")
  verifiedBy       Int?             @map("verified_by")
  suspendedAt      DateTime?        @map("suspended_at")
  suspendedReason  String?          @map("suspended_reason")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations - NEW for chains
  parentRestaurant Restaurant?  @relation("RestaurantChain", fields: [parentRestaurantId], references: [id])
  chainLocations   Restaurant[] @relation("RestaurantChain")

  // Relations
  settings             RestaurantSettings?
  subscription         Subscription?
  staff                RestaurantStaff[]
  categories           Category[]
  ingredientCategories IngredientCategory[]
  ingredients          Ingredient[]
  unitsOfMeasure       UnitOfMeasure[]
  recipes              Recipe[]
  menus                Menu[]
  reservations         Reservation[]
  orders               Order[]
  prepColumns          PrepColumn[]
  prepTasks            PrepTask[]
  customerRestaurants  CustomerRestaurant[]     @relation("RestaurantToCustomers")
  customers            Customer[]               @relation("RestaurantCustomers")
  restaurantNotes      RestaurantNote[]
  supportTickets       SupportTicket[]
  contentBlocks        ContentBlock[]
  dinerProfiles        DinerRestaurantProfile[]
  favorites            FavoriteRestaurant[]
  reviews              Review[]
  loyaltyPoints        LoyaltyPoints[]

  @@index([slug])
  @@index([isActive])
  @@index([parentRestaurantId])
  @@map("restaurants")
}

model RestaurantSettings {
  id                     Int          @id @default(autoincrement())
  restaurantId           Int          @unique
  restaurant             Restaurant   @relation(fields: [restaurantId], references: [id])
  
  // Template
  templateId             Int?
  template               WebsiteTemplate? @relation(fields: [templateId], references: [id])
  customCss              String?      @db.Text
  
  // Website Content
  websiteName            String?
  tagline                String?
  metaTitle              String?
  metaDescription        String?
  
  // Hero Section
  heroTitle              String?
  heroSubtitle           String?
  heroImageUrl           String?
  heroImagePublicId      String?
  heroCTAText            String?
  heroCTALink            String?
  
  // About Section
  aboutTitle             String?
  aboutDescription       String?      @db.Text
  aboutImageUrl          String?
  aboutImagePublicId     String?
  
  // Logo
  logoUrl                String?
  logoPublicId           String?
  
  // Colors
  primaryColor           String?      @default("#1976d2")
  secondaryColor         String?      @default("#dc004e")
  accentColor            String?      @default("#333333")
  
  // Fonts
  fontPrimary            String?      @default("Roboto, sans-serif")
  fontSecondary          String?      @default("Playfair Display, serif")
  
  // Contact Info
  contactPhone           String?
  contactEmail           String?
  contactAddress         String?
  contactCity            String?
  contactState           String?
  contactZip             String?
  
  // Operating Hours
  openingHours           Json?        @default("{}")
  
  // Social Media
  facebookUrl            String?
  instagramUrl           String?
  twitterUrl             String?
  linkedinUrl            String?
  
  // Footer
  footerText             String?
  
  // Menu Settings
  activeMenuIds          Int[]        @default([])
  menuDisplayMode        String?      @default("grid")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("restaurant_settings")
}

model WebsiteTemplate {
  id                     Int          @id @default(autoincrement())
  name                   String       @unique
  displayName            String
  description            String?
  category               String       // classic, modern, minimal, premium
  thumbnail              String?      // Preview image URL
  
  // Layout Configuration
  layoutConfig           Json         // Stores section order, grid layouts, etc.
  
  // Default Theme Settings
  defaultColors          Json         // Primary, secondary, accent, etc.
  defaultFonts           Json         // Heading, body, special fonts
  defaultSpacing         Json         // Padding, margins, gaps
  
  // Component Styles
  heroStyle              String       @default("standard") // standard, video, slideshow, parallax, minimal
  menuStyle              String       @default("grid") // grid, list, tabs, carousel, elegant
  aboutStyle             String       @default("side-by-side") // side-by-side, centered, alternating
  navigationStyle        String       @default("standard") // standard, minimal, elegant, sticky
  
  // Typography Settings
  headingStyle           String       @default("serif") // serif, sans-serif, mixed
  bodyStyle              String       @default("sans-serif") // serif, sans-serif
  letterSpacing          String       @default("normal") // normal, wide, tight
  textTransform          String       @default("none") // none, uppercase, capitalize
  
  // Animation Settings
  animationStyle         String       @default("none") // none, subtle, elegant, dynamic
  transitionSpeed        String       @default("normal") // slow, normal, fast
  
  // Features
  features               String[]     // List of included features/components
  
  // Metadata
  isPremium              Boolean      @default(false)
  isActive               Boolean      @default(true)
  sortOrder              Int          @default(0)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  
  // Relations
  restaurantSettings     RestaurantSettings[]
  
  @@index([category])
  @@index([isActive])
}

model ContentBlock {
  id            Int        @id @default(autoincrement())
  restaurantId  Int        @map("restaurant_id")
  page          String     @default("home") @db.VarChar(50)
  blockType     String     @map("block_type") @db.VarChar(50)
  title         String?    @db.VarChar(255)
  subtitle      String?    @db.VarChar(500)
  content       String?
  imageUrl      String?    @map("image_url")
  imagePublicId String?    @map("image_public_id") @db.VarChar(255)
  videoUrl      String?    @map("video_url")
  buttonText    String?    @map("button_text") @db.VarChar(100)
  buttonLink    String?    @map("button_link") @db.VarChar(255)
  buttonStyle   String?    @default("primary") @map("button_style") @db.VarChar(50)
  settings      Json?      @default("{}") @db.Json
  displayOrder  Int        @default(0) @map("display_order")
  isActive      Boolean    @default(true) @map("is_active")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId, page])
  @@index([displayOrder])
  @@map("content_blocks")
}

model RestaurantStaff {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  restaurantId Int        @map("restaurant_id")
  role         StaffRole  @default(STAFF)
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User       @relation("StaffUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@index([userId])
  @@index([restaurantId])
  @@map("restaurant_staff")
}

model Customer {
  id                       Int       @id @default(autoincrement())
  restaurantId             Int       @default(1) @map("restaurant_id")
  email                    String    @unique
  password                 String
  firstName                String?   @map("first_name")
  lastName                 String?   @map("last_name")
  phone                    String?   @db.VarChar(50)
  emailVerified            Boolean   @default(false) @map("email_verified")
  emailVerificationToken   String?   @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  passwordResetToken       String?   @map("password_reset_token")
  passwordResetExpires     DateTime? @map("password_reset_expires")
  lastLogin                DateTime? @map("last_login")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  // Relations
  customerPreferences CustomerPreferences?
  sessions            CustomerSession[]
  restaurant          Restaurant           @relation("RestaurantCustomers", fields: [restaurantId], references: [id])
  restaurantLinks     CustomerRestaurant[] @relation("CustomerToRestaurants")

  @@index([email])
  @@index([restaurantId])
  @@map("customers")
}

model CustomerRestaurant {
  customerId   Int      @map("customer_id")
  restaurantId Int      @map("restaurant_id")
  firstVisit   DateTime @default(now()) @map("first_visit")
  lastVisit    DateTime @updatedAt @map("last_visit")
  visitCount   Int      @default(0) @map("visit_count")
  totalSpent   Decimal? @map("total_spent") @db.Decimal(10, 2)
  notes        String?
  tags         String[]
  vipStatus    Boolean  @default(false) @map("vip_status")
  preferences  Json?    @db.Json
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  customer   Customer   @relation("CustomerToRestaurants", fields: [customerId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation("RestaurantToCustomers", fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([customerId, restaurantId])
  @@index([customerId])
  @@index([restaurantId])
  @@map("customer_restaurants")
}

model CustomerPreferences {
  id                     Int      @id @default(autoincrement())
  customerId             Int      @unique @map("customer_id")
  dietaryRestrictions    String?  @map("dietary_restrictions")
  seatingPreferences     String?  @map("seating_preferences")
  specialOccasions       Json?    @map("special_occasions") @db.Json
  marketingOptIn         Boolean  @default(true) @map("marketing_opt_in")
  smsNotifications       Boolean  @default(false) @map("sms_notifications")
  preferredContactMethod String?  @default("email") @map("preferred_contact_method") @db.VarChar(20)
  notes                  String?
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

model CustomerSession {
  id         Int      @id @default(autoincrement())
  customerId Int      @map("customer_id")
  token      String   @unique @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("customer_sessions")
}

model CustomerProfile {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique @map("user_id")
  phoneVerified          Boolean   @default(false) @map("phone_verified")
  emailVerified          Boolean   @default(false) @map("email_verified")
  preferredContactMethod String?   @default("email") @map("preferred_contact_method") @db.VarChar(20)
  dietaryRestrictions    String?   @map("dietary_restrictions")
  specialRequests        String?   @map("special_requests")
  vipStatus              Boolean   @default(false) @map("vip_status")
  tags                   String[]
  notes                  String?
  marketingOptIn         Boolean   @default(true) @map("marketing_opt_in")
  birthday               DateTime? @db.Date
  anniversary            DateTime? @db.Date
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vipStatus])
  @@index([userId], map: "idx_customer_profiles_user_id")
  @@index([vipStatus], map: "idx_customer_profiles_vip_status")
  @@map("customer_profiles")
}

enum UnitType {
  WEIGHT
  VOLUME
  COUNT
  OTHER
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum IssueType {
  FEATURE
  BUG
  ENHANCEMENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PrepTaskStatus {
  TO_PREP
  PREPPING
  READY
  COMPLETE
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  SERVED
  CANCELLED
}

enum StaffRole {
  STAFF
  MANAGER
  OWNER
}

// ===== PLATFORM MODELS =====

// Platform administration
model PlatformAdmin {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String
  role        PlatformRole @default(SUPPORT)
  lastLoginAt DateTime?    @map("last_login_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  actions        PlatformAction[]
  supportTickets SupportTicket[]
  notes          RestaurantNote[]

  @@map("platform_admins")
}

model PlatformAction {
  id         Int      @id @default(autoincrement())
  adminId    Int      @map("admin_id")
  action     String
  entityType String?  @map("entity_type") // 'restaurant', 'subscription', etc.
  entityId   Int?     @map("entity_id")
  metadata   Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  admin PlatformAdmin @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([entityType, entityId])
  @@map("platform_actions")
}

// Diner account (platform-owned, across all restaurants)
model Diner {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  password      String
  firstName     String? @map("first_name")
  lastName      String? @map("last_name")
  phone         String? @db.VarChar(50)
  phoneVerified Boolean @default(false) @map("phone_verified")
  emailVerified Boolean @default(false) @map("email_verified")
  profilePhoto  String? @map("profile_photo")
  bio           String?

  // Platform preferences
  emailOptIn     Boolean @default(true) @map("email_opt_in")
  smsOptIn       Boolean @default(false) @map("sms_opt_in")
  marketingOptIn Boolean @default(true) @map("marketing_opt_in")

  // Auth tokens
  emailVerificationToken   String?   @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  passwordResetToken       String?   @map("password_reset_token")
  passwordResetExpires     DateTime? @map("password_reset_expires")

  // Status
  isActive     Boolean   @default(true) @map("is_active")
  joinedAt     DateTime  @default(now()) @map("joined_at")
  lastActiveAt DateTime? @map("last_active_at")

  // Relations
  reservations       Reservation[]            @relation("DinerReservations")
  reviews            Review[]
  favorites          FavoriteRestaurant[]
  restaurantProfiles DinerRestaurantProfile[]
  loyaltyPoints      LoyaltyPoints[]
  notifications      DinerNotification[]
  sessions           DinerSession[]

  @@index([email])
  @@map("diners")
}

// Diner session management
model DinerSession {
  id        Int      @id @default(autoincrement())
  dinerId   Int      @map("diner_id")
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  diner Diner @relation(fields: [dinerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("diner_sessions")
}

// Restaurant-specific diner data
model DinerRestaurantProfile {
  dinerId      Int @map("diner_id")
  restaurantId Int @map("restaurant_id")

  // Restaurant's notes about this diner
  internalNotes String?       @map("internal_notes")
  tags          String[]
  vipStatus     Boolean       @default(false) @map("vip_status")
  spendingTier  SpendingTier? @map("spending_tier")

  // Stats
  totalReservations Int      @default(0) @map("total_reservations")
  totalSpent        Decimal? @map("total_spent") @db.Decimal(10, 2)
  averagePartySize  Float?   @map("average_party_size")
  noShowCount       Int      @default(0) @map("no_show_count")
  cancellationCount Int      @default(0) @map("cancellation_count")

  // Preferences known by restaurant
  seatingPreferences String? @map("seating_preferences")
  allergyNotes       String? @map("allergy_notes")
  specialOccasions   Json?   @map("special_occasions")

  firstVisit DateTime  @default(now()) @map("first_visit")
  lastVisit  DateTime? @map("last_visit")

  diner      Diner      @relation(fields: [dinerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([dinerId, restaurantId])
  @@map("diner_restaurant_profiles")
}

// Favorite restaurants
model FavoriteRestaurant {
  dinerId      Int      @map("diner_id")
  restaurantId Int      @map("restaurant_id")
  addedAt      DateTime @default(now()) @map("added_at")

  diner      Diner      @relation(fields: [dinerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([dinerId, restaurantId])
  @@map("favorite_restaurants")
}

// Reviews (platform-owned)
model Review {
  id            Int @id @default(autoincrement())
  dinerId       Int @map("diner_id")
  restaurantId  Int @map("restaurant_id")
  reservationId Int @unique @map("reservation_id")

  // Ratings
  overallRating  Int  @map("overall_rating") // 1-5
  foodRating     Int? @map("food_rating")
  serviceRating  Int? @map("service_rating")
  ambianceRating Int? @map("ambiance_rating")

  // Content
  reviewText     String?  @map("review_text")
  wouldRecommend Boolean? @map("would_recommend")

  // Platform moderation
  status      ReviewStatus @default(PENDING)
  moderatedAt DateTime?    @map("moderated_at")
  moderatedBy Int?         @map("moderated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  diner       Diner       @relation(fields: [dinerId], references: [id])
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])
  reservation Reservation @relation(fields: [reservationId], references: [id])

  @@index([restaurantId, status])
  @@map("reviews")
}

// Platform-wide loyalty
model LoyaltyPoints {
  id           Int  @id @default(autoincrement())
  dinerId      Int  @map("diner_id")
  restaurantId Int? @map("restaurant_id") // null = platform points

  points        Int
  reason        String
  reservationId Int?   @map("reservation_id")

  earnedAt  DateTime  @default(now()) @map("earned_at")
  expiresAt DateTime? @map("expires_at")

  diner      Diner       @relation(fields: [dinerId], references: [id])
  restaurant Restaurant? @relation(fields: [restaurantId], references: [id])

  @@index([dinerId])
  @@map("loyalty_points")
}

// Diner notifications
model DinerNotification {
  id        Int              @id @default(autoincrement())
  dinerId   Int              @map("diner_id")
  type      NotificationType
  title     String
  message   String
  metadata  Json?
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  diner Diner @relation(fields: [dinerId], references: [id])

  @@index([dinerId, isRead])
  @@map("diner_notifications")
}

// ===== SUBSCRIPTION & BILLING MODELS =====

model Subscription {
  id           Int                @id @default(autoincrement())
  restaurantId Int                @unique @map("restaurant_id")
  plan         SubscriptionPlan   @default(TRIAL)
  status       SubscriptionStatus @default(TRIAL)

  // Module Access - NEW FIELDS
  enabledModules      String[] @default([]) @map("enabled_modules")
  moduleAccess        Json?    @map("module_access")
  maxLocations        Int      @default(1) @map("max_locations")
  maxStaffAccounts    Int      @default(2) @map("max_staff_accounts")
  maxCustomerAccounts Int      @default(100) @map("max_customer_accounts")
  customDomain        Boolean  @default(false) @map("custom_domain")
  prioritySupport     Boolean  @default(false) @map("priority_support")
  apiAccess           Boolean  @default(false) @map("api_access")
  whiteLabel          Boolean  @default(false) @map("white_label")

  // Stripe
  stripeCustomerId String? @unique @map("stripe_customer_id")
  stripeSubId      String? @unique @map("stripe_sub_id")
  stripePriceId    String? @map("stripe_price_id")

  // Billing period
  currentPeriodStart DateTime  @default(now()) @map("current_period_start")
  currentPeriodEnd   DateTime  @map("current_period_end")
  cancelAt           DateTime? @map("cancel_at")
  canceledAt         DateTime? @map("canceled_at")
  trialEndsAt        DateTime? @map("trial_ends_at")

  // Billing info
  billingEmail      String?   @map("billing_email")
  billingName       String?   @map("billing_name")
  billingAddress    Json?     @map("billing_address")
  paymentMethodId   String?   @map("payment_method_id")
  lastPaymentStatus String?   @map("last_payment_status")
  lastPaymentDate   DateTime? @map("last_payment_date")

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  invoices     Invoice[]
  usageRecords UsageRecord[]

  @@index([status])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

model Invoice {
  id              Int     @id @default(autoincrement())
  subscriptionId  Int     @map("subscription_id")
  stripeInvoiceId String? @unique @map("stripe_invoice_id")

  // Invoice details
  invoiceNumber String        @unique @map("invoice_number")
  status        InvoiceStatus @default(DRAFT)
  amount        Decimal       @db.Decimal(10, 2)
  tax           Decimal?      @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")

  // Dates
  periodStart DateTime  @map("period_start")
  periodEnd   DateTime  @map("period_end")
  dueDate     DateTime? @map("due_date")
  paidAt      DateTime? @map("paid_at")

  // Payment
  paymentMethod   String? @map("payment_method")
  paymentIntentId String? @map("payment_intent_id")

  // PDF/Receipt
  invoiceUrl       String? @map("invoice_url")
  hostedInvoiceUrl String? @map("hosted_invoice_url")
  invoicePdf       String? @map("invoice_pdf")

  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([status])
  @@map("invoices")
}

model UsageRecord {
  id             Int         @id @default(autoincrement())
  subscriptionId Int         @map("subscription_id")
  metric         UsageMetric

  // Usage data
  quantity    Int
  unitAmount  Decimal? @map("unit_amount") @db.Decimal(10, 4)
  totalAmount Decimal? @map("total_amount") @db.Decimal(10, 2)

  // Period
  periodStart DateTime @map("period_start")
  periodEnd   DateTime @map("period_end")
  recordedAt  DateTime @default(now()) @map("recorded_at")

  // Stripe
  stripeUsageRecordId String? @unique @map("stripe_usage_record_id")

  metadata Json?

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId, metric])
  @@index([periodStart, periodEnd])
  @@map("usage_records")
}

// Support ticket system for platform
model SupportTicket {
  id           Int @id @default(autoincrement())
  restaurantId Int @map("restaurant_id")

  // Ticket details
  subject     String
  description String         @db.Text
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    String?

  // Assignment
  assignedToId Int? @map("assigned_to_id")

  // Timestamps
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  resolvedAt DateTime? @map("resolved_at")

  // Relations
  restaurant Restaurant      @relation(fields: [restaurantId], references: [id])
  assignedTo PlatformAdmin?  @relation(fields: [assignedToId], references: [id])
  messages   TicketMessage[]

  @@index([restaurantId])
  @@index([status])
  @@index([assignedToId])
  @@map("support_tickets")
}

model TicketMessage {
  id       Int @id @default(autoincrement())
  ticketId Int @map("ticket_id")

  // Message details
  message    String  @db.Text
  isInternal Boolean @default(false) @map("is_internal")

  // Sender
  senderType SenderType @map("sender_type")
  senderId   Int        @map("sender_id")
  senderName String     @map("sender_name")

  // Attachments
  attachments Json?

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  ticket SupportTicket @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@map("ticket_messages")
}

model RestaurantNote {
  id           Int      @id @default(autoincrement())
  restaurantId Int      @map("restaurant_id")
  adminId      Int      @map("admin_id")
  note         String   @db.Text
  isInternal   Boolean  @default(true) @map("is_internal")
  createdAt    DateTime @default(now()) @map("created_at")

  restaurant Restaurant    @relation(fields: [restaurantId], references: [id])
  admin      PlatformAdmin @relation(fields: [adminId], references: [id])

  @@index([restaurantId])
  @@map("restaurant_notes")
}

// Platform Enums
enum PlatformRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
  BILLING
}

enum OnboardingStatus {
  PENDING
  EMAIL_VERIFIED
  INFO_SUBMITTED
  PAYMENT_ADDED
  VERIFIED
  ACTIVE
  REJECTED
}

enum SubscriptionPlan {
  TRIAL
  FREE
  HOME
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

enum ReservationSource {
  PLATFORM_WEB // TableFarm.com
  PLATFORM_APP // TableFarm mobile app
  RESTAURANT_WIDGET // Restaurant's website widget
  RESTAURANT_STAFF // Staff entered
  PHONE // Called in
  WALK_IN // Walk-in converted
}

enum ReservationOccasion {
  BIRTHDAY
  ANNIVERSARY
  DATE_NIGHT
  BUSINESS_MEAL
  SPECIAL_CELEBRATION
  OTHER
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  HIDDEN
  REMOVED
}

enum SpendingTier {
  BRONZE // < $500/year
  SILVER // $500-2000/year
  GOLD // $2000-5000/year
  PLATINUM // > $5000/year
}

enum NotificationType {
  RESERVATION_CONFIRMED
  RESERVATION_REMINDER
  RESERVATION_CANCELLED
  REVIEW_REQUEST
  MARKETING
  SYSTEM
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  FAILED
  REFUNDED
}

enum UsageMetric {
  RESERVATIONS
  ACTIVE_STAFF
  STORAGE_MB
  API_CALLS
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SenderType {
  PLATFORM_ADMIN
  RESTAURANT_USER
  SYSTEM
}
